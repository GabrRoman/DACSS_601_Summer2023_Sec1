{
  "hash": "9af8fc95cafcc1ca560ac3e5f0579bc5",
  "result": {
    "markdown": "---\ntitle: \"Challenge 9 solution\"\nauthor: \"Xinpeng Liu\"\ndescription: \"Creating a function\"\ndate: \"7/5/2023\"\nformat:\n  html:\n    toc: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_9\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(ggplot2)\n\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\n```\n:::\n\n\n## Challenge Overview\n\nToday's challenge is simple. Create a function, and use it to perform a data analysis / cleaning / visualization task:\n\nExamples of such functions are:\n1) A function that reads in and cleans a dataset.  \n2) A function that computes summary statistics (e.g., computes the z score for a variable).  \n3) A function that plots a histogram.  \n\nThat's it!\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Specify the file path\nfile_path <- \"_data/eggs_tidy.csv\"\n\n# 1. Read and clean a dataset\nread_and_clean <- function(file_path) {\n    # Read the data\n    data <- read.csv(file_path, header = FALSE)\n    \n    # Set column names\n    colnames(data) <- c('Month', 'Year', 'Val1', 'Val2', 'Val3', 'Val4')\n    \n    # Convert numeric columns to numeric data type\n    data$Val1 <- as.numeric(as.character(data$Val1))\n    data$Val2 <- as.numeric(as.character(data$Val2))\n    data$Val3 <- as.numeric(as.character(data$Val3))\n    data$Val4 <- as.numeric(as.character(data$Val4))\n    \n    # Handle potential non-numeric values\n    data$Val1[is.na(data$Val1)] <- mean(data$Val1, na.rm = TRUE)\n    data$Val2[is.na(data$Val2)] <- mean(data$Val2, na.rm = TRUE)\n    data$Val3[is.na(data$Val3)] <- mean(data$Val3, na.rm = TRUE)\n    data$Val4[is.na(data$Val4)] <- mean(data$Val4, na.rm = TRUE)\n    \n    # Return the clean data\n    return(data)\n}\n\n# Read and clean the data\nclean_data <- read_and_clean(file_path)\n\n# 2. Compute summary statistics (e.g., computes the z score for a variable)\ncompute_z_score <- function(data, column_name) {\n    column <- data[[column_name]]\n    z_scores <- (column - mean(column)) / sd(column)\n    return(z_scores)\n}\n\n# Compute z-scores for 'Val1'\nval1_z_scores <- compute_z_score(clean_data, 'Val1')\n\n# 3. Plot a histogram\nplot_histogram <- function(data, column_name) {\n    hist(data[[column_name]], main = paste(\"Histogram of\", column_name), \n         xlab = column_name)\n}\n\n# Plot histogram for 'Val1'\nplot_histogram(clean_data, 'Val1')\n```\n\n::: {.cell-output-display}\n![](challenge9_solution_Xinpeng_Liu_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\nLet's break this down. The code does three main things to analyze a dataset about egg prices.\n\nFirst up, read_and_clean function. Think of it like a bouncer at a club. It reads the guest list (our data), then ensures everyone's age (data type) is correct and that no one (no data) is missing.\n\nNext, the compute_z_score function. This is like your school teacher who marks your test and tells you how far off you were from the class average. But here, we're looking at things like egg prices instead of test scores.\n\nLast, but not least, the plot_histogram function. This is like creating a bar chart of all the students' heights in your class. But instead of student heights, we're looking at whatever variable we're interested in - could be egg prices, could be something else.",
    "supporting": [
      "challenge9_solution_Xinpeng_Liu_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}