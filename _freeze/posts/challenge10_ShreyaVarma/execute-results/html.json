{
  "hash": "eb13ff368585f4e8b7b07341228ad966",
  "result": {
    "markdown": "---\ntitle: \"Challenge 10 Solution\"\nauthor: \"Shreya Varma\"\ndescription: \"purrr\"\ndate: \"5/30/2023\"\nformat:\n  html:\n    toc: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_10\n---\n\n\n\n\n## Challenge Overview\n\nThe [purrr](https://purrr.tidyverse.org/) package is a powerful tool for functional programming. It allows the user to apply a single function across multiple objects. It can replace for loops with a more readable (and often faster) simple function call. \n\nFor example, we can draw `n` random samples from 10 different distributions using a vector of 10 means.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 100 # sample size\nm <- seq(1,10) # means \nsamps <- map(m,rnorm,n=n) \n```\n:::\n\n\nWe can then use `map_dbl` to verify that this worked correctly by computing the mean for each sample.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nsamps %>%\n  map_dbl(mean)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 1.052554 1.905349 3.034037 4.038838 5.151351 6.094199 7.032789 7.970365\n [9] 8.977754 9.949969\n```\n:::\n:::\n\n\n`purrr` is tricky to learn (but beyond useful once you get a handle on it). Therefore, it's imperative that you complete the `purr` and `map` readings before attempting this challenge.  \n\n## The challenge  \n\nUse `purrr` with a function to perform *some* data science task. What this task is is up to you. It could involve computing summary statistics, reading in multiple datasets, running a random process multiple times, or anything else you might need to do in your work as a data analyst. You might consider using `purrr` with a function you wrote for challenge 9. \n\nI am using map_chr() from purrr along with my function that I created in challenge 9 as suggested. I am replacing multiple LOV's in columns market_segment and meal with values that make the dataset more readable.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhotel_bookings <- read_csv(\"_data/hotel_bookings.csv\")\nhead(hotel_bookings)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 32\n  hotel        is_canceled lead_time arrival_date_year arrival_date_month\n  <chr>              <dbl>     <dbl>             <dbl> <chr>             \n1 Resort Hotel           0       342              2015 July              \n2 Resort Hotel           0       737              2015 July              \n3 Resort Hotel           0         7              2015 July              \n4 Resort Hotel           0        13              2015 July              \n5 Resort Hotel           0        14              2015 July              \n6 Resort Hotel           0        14              2015 July              \n# ℹ 27 more variables: arrival_date_week_number <dbl>,\n#   arrival_date_day_of_month <dbl>, stays_in_weekend_nights <dbl>,\n#   stays_in_week_nights <dbl>, adults <dbl>, children <dbl>, babies <dbl>,\n#   meal <chr>, country <chr>, market_segment <chr>,\n#   distribution_channel <chr>, is_repeated_guest <dbl>,\n#   previous_cancellations <dbl>, previous_bookings_not_canceled <dbl>,\n#   reserved_room_type <chr>, assigned_room_type <chr>, …\n```\n:::\n\n```{.r .cell-code}\nunique(hotel_bookings$meal)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"BB\"        \"FB\"        \"HB\"        \"SC\"        \"Undefined\"\n```\n:::\n\n```{.r .cell-code}\nunique(hotel_bookings$market_segment)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Direct\"        \"Corporate\"     \"Online TA\"     \"Offline TA/TO\"\n[5] \"Complementary\" \"Groups\"        \"Undefined\"     \"Aviation\"     \n```\n:::\n\n```{.r .cell-code}\n# Define the replacement mappings\nmeal_replacements <- c(\"BB\" = \"Bed and Breakfast\",\n                       \"HB\" = \"Half Board\",\n                       \"FB\" = \"Full Board\",\n                       \"SC\" = \"Self Catering\")\n\nmarket_segment_replacements <- c(\"Online TA\" = \"Online Travel Agent\",\n                                 \"Offline TA/TO\" = \"Offline Travel Agent/Tour Operator\")\n\n# Function to replace values\nreplace_values <- function(data, column_name, replacements) {\n  data %>%\n    mutate({{column_name}} := map_chr({{column_name}}, ~ ifelse(.x %in% names(replacements), replacements[.x], .x)))\n}\n\n# Replace meal values\nhotel_bookings <- replace_values(hotel_bookings, meal, meal_replacements)\nunique(hotel_bookings$meal)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Bed and Breakfast\" \"Full Board\"        \"Half Board\"       \n[4] \"Self Catering\"     \"Undefined\"        \n```\n:::\n\n```{.r .cell-code}\n# Replace market_segment values\nhotel_bookings <- replace_values(hotel_bookings, market_segment, market_segment_replacements)\nunique(hotel_bookings$market_segment)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Direct\"                             \"Corporate\"                         \n[3] \"Online Travel Agent\"                \"Offline Travel Agent/Tour Operator\"\n[5] \"Complementary\"                      \"Groups\"                            \n[7] \"Undefined\"                          \"Aviation\"                          \n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}