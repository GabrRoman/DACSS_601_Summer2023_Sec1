{
  "hash": "aa7c4f15c8c9f53fc8d9b6bbe3930e6b",
  "result": {
    "markdown": "---\ntitle: \"Challenge 9\"\nauthor: \"Audrey Bertin\"\ndescription: \"Creating a function\"\ndate: \"6/29/2023\"\nformat:\n  html:\n    df-print: paged\n    toc: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_9\n  - functions\n  - audrey_bertin\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(ggplot2)\n\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\n```\n:::\n\n\nFor this week's challenge, I'll create a function that calculates z score for a certain value based on a baseline computed from a vector.\n\nIt will take the following as input:\n\n- `baseline` = vector of numbers of any length\n- `value` = the value to compute the z score for\n\nIt will then give the following as output:\n\n- a dataframe with `mean`, `sd` (of baseline), `input_value` and `z_score`\n\n#### Function Definition\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nz_score <- function(baseline, value){\n  mean <- mean(baseline)\n  sd <- sd(baseline)\n  z_score <- abs((value - mean)/sd)\n  \n  results = tibble(mean = mean, sd = sd, input_value = value, z_score = z_score)\n  return(results)\n}\n```\n:::\n\n\n#### Testing\n\n\nLet's use the following inputs to test the function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbaseline = c(4, 2, -1, 4, 9, 2, 3, 3, 1 -5)\nvalue = 10\n```\n:::\n\n\n\nWe expect the following results if this runs correctly:\n\n- Mean should be: 2.4444444\n- SD should be: 3.5746018\n- Input value should be 10\n- Z score should be the absolute value of (`value` - `mean`) / `sd` -> abs value of (10 - 2.4444444) / 3.5746018 -> 2.1136776\n\nWe confirm this by running the function below and confirming the results match:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresults = z_score(baseline, value)\nresults\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"mean\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"sd\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"input_value\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"z_score\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"2.444444\",\"2\":\"3.574602\",\"3\":\"10\",\"4\":\"2.113678\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_zscore <- function(baseline, value){\n  \n  results = z_score(baseline, value)\n\n  expected_mean = mean(baseline)\n  actual_mean = results$mean\n  \n  expected_sd = sd(baseline)\n  actual_sd = results$sd\n  \n  expected_input = value\n  actual_input = results$input_value\n  \n  expected_z = abs((value -  mean(baseline)) / sd(baseline))\n  actual_z = results$z_score\n  \n  cat(\"Mean matches: \", expected_mean == actual_mean, \"( Actual:\", actual_mean, \"Expected:\", expected_mean, \")\\n\")\n  cat(\"SD matches: \", expected_sd == actual_sd, \"( Actual:\", actual_sd, \"Expected:\", expected_sd, \")\\n\")\n  cat(\"Input matches: \", expected_input == actual_input, \"( Actual:\", actual_input, \"Expected:\", expected_input, \")\\n\")\n  cat(\"Z Score matches: \", expected_z == actual_z, \"( Actual:\", actual_z, \"Expected:\", expected_z, \")\")\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_zscore(baseline, value)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMean matches:  TRUE ( Actual: 2.444444 Expected: 2.444444 )\nSD matches:  TRUE ( Actual: 3.574602 Expected: 3.574602 )\nInput matches:  TRUE ( Actual: 10 Expected: 10 )\nZ Score matches:  TRUE ( Actual: 2.113678 Expected: 2.113678 )\n```\n:::\n:::\n\n\n\nWe can test again with a second set:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbaseline = c(-12, 4, 7, -3, 1, 1, 0, 8, 23, -3, -8, 12, -14, 2, 16)\nvalue = -6\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_zscore(baseline, value)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMean matches:  TRUE ( Actual: 2.266667 Expected: 2.266667 )\nSD matches:  TRUE ( Actual: 10.03185 Expected: 10.03185 )\nInput matches:  TRUE ( Actual: -6 Expected: -6 )\nZ Score matches:  TRUE ( Actual: 0.8240418 Expected: 0.8240418 )\n```\n:::\n:::\n\n\n\nThe function seems to work as expected!",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}