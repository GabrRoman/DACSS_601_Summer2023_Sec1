{
  "hash": "7c11527d1e8d5b1f203c99c57c35a180",
  "result": {
    "markdown": "---\ntitle: \"Challenge 9 Solution - Functions\"\nauthor: \"Linus Jen\"\ndescription: \"Creating a function\"\ndate: \"7/4/2023\"\nformat:\n  html:\n    toc: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_9\n  - Linus Jen\n  - wildbirds\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(ggplot2)\nlibrary(here)\n\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\n```\n:::\n\n\n## Challenge Overview\n\nFor this challenge, I will create a function that quickly summarizes a single numerical column via a 5 (or 6) number summary. I will also allow the function to have an optional `group_by` argument in case the user wanted to get summaries based on a specific category.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnumeric_summary <- function(dataframe, num_var, group_by_var) {\n  # Given the column of a dataframe, find the min, Q1, median, mean, Q3, max, and st. dev. for that column\n  # Optional: allow for group_bys\n  dataframe %>%\n    group_by(pick({{ group_by_var }})) %>%\n    summarise(\"min_{{ num_var }}\" := min({{ num_var }}, na.rm=TRUE),\n              \"q1_{{ num_var }}\" := quantile({{ num_var }}, 0.25, 1, na.rm=TRUE),\n              \"mean_{{ num_var }}\" := round(mean({{ num_var }}, na.rm=TRUE), 4),\n              \"med_{{ num_var }}\" := median({{ num_var }}, na.rm=TRUE),\n              \"q3_{{ num_var }}\" := quantile({{ num_var }}, 0.75, 1, na.rm=TRUE),\n              \"max_{{ num_var }}\" := max({{ num_var }}, na.rm=TRUE),\n              \"sd_{{ num_var}}\" := sd({{ num_var }}, na.rm=TRUE))\n}\n```\n:::\n\n\nFor my function `numeric_summary`, it accepts 3 arguments: the dataframe, a numeric variable to summarize over, and the group by variable if the user wants to aggregate variables by a certain category. This function gives the minimum, 1st quartile, mean, median, 3rd quartile, maximum, and standard deviation of a numeric variable. I chose to make this function because while working on my project, I found it really annoying to copy/paste / reuse the same code over and over again, and figured it would be interesting to quickly create a function for this.\n\n\n## Dataset\n\nTo test this function, I used the `birds.csv` file, which is a collection of information about specific birds and their populations around the world at various points in time.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Pull in data\nbirds <- read_csv(here(\"posts\", \"_data\", \"birds.csv\"))\n\n# View the data\nbirds\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 30,977 × 14\n   `Domain Code` Domain     `Area Code` Area  `Element Code` Element `Item Code`\n   <chr>         <chr>            <dbl> <chr>          <dbl> <chr>         <dbl>\n 1 QA            Live Anim…           2 Afgh…           5112 Stocks         1057\n 2 QA            Live Anim…           2 Afgh…           5112 Stocks         1057\n 3 QA            Live Anim…           2 Afgh…           5112 Stocks         1057\n 4 QA            Live Anim…           2 Afgh…           5112 Stocks         1057\n 5 QA            Live Anim…           2 Afgh…           5112 Stocks         1057\n 6 QA            Live Anim…           2 Afgh…           5112 Stocks         1057\n 7 QA            Live Anim…           2 Afgh…           5112 Stocks         1057\n 8 QA            Live Anim…           2 Afgh…           5112 Stocks         1057\n 9 QA            Live Anim…           2 Afgh…           5112 Stocks         1057\n10 QA            Live Anim…           2 Afgh…           5112 Stocks         1057\n# ℹ 30,967 more rows\n# ℹ 7 more variables: Item <chr>, `Year Code` <dbl>, Year <dbl>, Unit <chr>,\n#   Value <dbl>, Flag <chr>, `Flag Description` <chr>\n```\n:::\n:::\n\n\nFirst, let's see how our function performs with only a numeric variable.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Test this out without a group_by\nbirds %>% numeric_summary(num_var = Value)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 7\n  min_Value q1_Value mean_Value med_Value q3_Value max_Value sd_Value\n      <dbl>    <dbl>      <dbl>     <dbl>    <dbl>     <dbl>    <dbl>\n1         0      171     99411.      1800    15404  23707134  720611.\n```\n:::\n:::\n\n\nThe function works without any concerns! This now provides us a quick glance at the distribution of the `Value` column in this dataset.\n\nNext, let's see how this function performs with given additional variables to group by.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Test this with a group_by\nbirds %>% numeric_summary(num_var = Value, group_by_var = Area)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 248 × 8\n   Area      min_Value q1_Value mean_Value med_Value q3_Value max_Value sd_Value\n   <chr>         <dbl>    <dbl>      <dbl>     <dbl>    <dbl>     <dbl>    <dbl>\n 1 Afghanis…      4700   6222.      8099.     6700      10565     14414   2.82e3\n 2 Africa         1213   5926.    196561.    12910.     25395   1897326   4.36e5\n 3 Albania         200    520       2278.     1300       3752      9494   2.27e3\n 4 Algeria          10     24      17621.       42.5     2072    136078   3.88e4\n 5 American…        24     35         41.4      38         40        80   1.40e1\n 6 Americas        553   7497     856356.    66924.    552649   5796289   1.54e6\n 7 Angola         3400   4925       9453.     6075       6930     36500   8.93e3\n 8 Antigua …        43     60.2       93.6      85        130       160   3.97e1\n 9 Argentina        75    530      18844.     2355      10350    118300   3.36e4\n10 Armenia         120    209.      2062.     1528.      3865      8934   2.04e3\n# ℹ 238 more rows\n```\n:::\n\n```{.r .cell-code}\n# Add in another variable\nbirds %>% numeric_summary(num_var = Value, group_by_var = c(Area, Item))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 601 × 9\n# Groups:   Area [248]\n   Area        Item   min_Value q1_Value mean_Value med_Value q3_Value max_Value\n   <chr>       <chr>      <dbl>    <dbl>      <dbl>     <dbl>    <dbl>     <dbl>\n 1 Afghanistan Chick…      4700    6222.      8099.     6700    10565      14414\n 2 Africa      Chick…    274201  470654.    936779.   865156. 1331023.   1897326\n 3 Africa      Ducks       6231    8126      13639.    12557    17740.     25428\n 4 Africa      Geese…      3882    4777.     12164.     8192.   18207.     29158\n 5 Africa      Pigeo…      2168    4650      11222.     9946.   13308.     36963\n 6 Africa      Turke…      1213    2156.      9004.     5496    11993      27341\n 7 Albania     Chick…      1580    2412.      4055.     3820.    4939       9494\n 8 Albania     Ducks        290     352.       558.      410.     732       1100\n 9 Albania     Geese…       200     241        396.      278.     463.       800\n10 Albania     Turke…       403     570        750.      674      879       1300\n# ℹ 591 more rows\n# ℹ 1 more variable: sd_Value <dbl>\n```\n:::\n:::\n\n\nThe tables above show how flexible functions can be. Given any number of variables to group over, the function would know what to group by, and produce the same numeric summaries over each aggregate.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}