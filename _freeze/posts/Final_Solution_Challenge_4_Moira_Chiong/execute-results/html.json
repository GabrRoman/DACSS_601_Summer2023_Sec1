{
  "hash": "d3234d74c75e75bc3fdc671f990053bd",
  "result": {
    "markdown": "---\ntitle: \"Challenge 4 Solutions\"\nauthor: \"Moira Chiong\"\ndescription: \"More data wrangling: pivoting\"\ndate: \"6/11/2023\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_4\n  - abc_poll\n  - eggs\n  - fed_rates\n  - hotel_bookings\n  - debt\n---\n\n\n## Challenge Overview\n\nToday's challenge is to:\n\n1)  read in a data set, and describe the data set using both words and any supporting information (e.g., tables, etc)\n2)  tidy data (as needed, including sanity checks)\n3)  identify variables that need to be mutated\n4)  mutate variables and sanity check all mutations\n\n## Read in data\n\nRead in one (or more) of the following datasets, using the correct R package and command.\n\n-   abc_poll.csv ⭐\n-   poultry_tidy.xlsx or organiceggpoultry.xls⭐⭐\n-   FedFundsRate.csv⭐⭐⭐\n-   hotel_bookings.csv⭐⭐⭐⭐\n-   debt_in_trillions.xlsx ⭐⭐⭐⭐⭐\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngetwd()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"C:/Users/chion/OneDrive/Desktop/DACSS 601/DACSS_601_Summer2023_Sec1/posts\"\n```\n:::\n\n```{.r .cell-code}\n setwd(\"C:/Users/chion/OneDrive/Desktop/DACSS 601/DACSS_601_Summer2023_Sec1/posts/_data\")\n library(readxl)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'readxl' was built under R version 4.1.3\n```\n:::\n\n```{.r .cell-code}\npoultry_tidy <- read_excel(\"C:/Users/chion/OneDrive/Desktop/DACSS 601/DACSS_601_Summer2023_Sec1/posts/_data/poultry_tidy.xlsx\")\npoultry_tidy\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 600 x 4\n   Product  Year Month     Price_Dollar\n   <chr>   <dbl> <chr>            <dbl>\n 1 Whole    2013 January           2.38\n 2 Whole    2013 February          2.38\n 3 Whole    2013 March             2.38\n 4 Whole    2013 April             2.38\n 5 Whole    2013 May               2.38\n 6 Whole    2013 June              2.38\n 7 Whole    2013 July              2.38\n 8 Whole    2013 August            2.38\n 9 Whole    2013 September         2.38\n10 Whole    2013 October           2.38\n# i 590 more rows\n```\n:::\n:::\n\n\n### Briefly describe the data\n\nThe data is for prices of poultry over the 2004-2013 period. There are 4 columns with 600 observations. There are five distinct cuts of poultry: \"Whole\", \"B/S Breast\", \"Bone-in Breast\", \"Whole Legs\", \"Thighs\"  . The lowest price of cuts of poultry is 1.94 while the maximum price is 7.04.  The average price for a cut of poultry is 3.39.\n\n::: {.cell}\n\n```{.r .cell-code}\nnrow(poultry_tidy)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 600\n```\n:::\n\n```{.r .cell-code}\nncol(poultry_tidy)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n\n```{.r .cell-code}\nunique(poultry_tidy$product)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Unknown or uninitialised column: `product`.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nNULL\n```\n:::\n\n```{.r .cell-code}\nunique(poultry_tidy$Year)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 2013 2012 2011 2010 2009 2008 2007 2006 2005 2004\n```\n:::\n\n```{.r .cell-code}\nmin(poultry_tidy$Price_Dollar, na.rm=TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1.935\n```\n:::\n\n```{.r .cell-code}\nmax(poultry_tidy$Price_Dollar, na.rm=TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 7.0375\n```\n:::\n\n```{.r .cell-code}\nmean(poultry_tidy$Price_Dollar, na.rm=TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3.390472\n```\n:::\n:::\n\n\n\n## Tidy Data (as needed)\n\nIs your data already tidy, or is there work to be done? Be sure to anticipate your end result to provide a sanity check, and document your work here.\n\n\n::: {.cell}\n\n:::\n\n\nAny additional comments?\n\n## Identify variables that need to be mutated\n\nAre there any variables that require mutation to be usable in your analysis stream? For example, are all time variables correctly coded as dates? Are all string variables reduced and cleaned to sensible categories? Do you need to turn any variables into factors and reorder for ease of graphics and visualization?\n\nDocument your work here.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nround(poultry_tidy$Price_Dollar, digits = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  [1] 2.38 2.38 2.38 2.38 2.38 2.38 2.38 2.38 2.38 2.38 2.38 2.38 7.04 7.04 7.04\n [16] 7.04 7.04 7.04 7.04 7.04 7.04 7.04 7.04 7.04 3.90 3.90 3.90 3.90 3.90 3.90\n [31] 3.90 3.90 3.90 3.90 3.90 3.90 2.04 2.04 2.04 2.04 2.04 2.04 2.04 2.04 2.04\n [46] 2.04 2.04 2.04 2.16 2.16 2.16 2.16 2.16 2.16 2.16 2.16 2.16 2.16 2.16 2.16\n [61] 2.35 2.38 2.38 2.38 2.38 2.38 2.38 2.38 2.38 2.38 2.38 2.38 6.38 7.00 7.00\n [76] 7.00 7.00 7.00 7.00 7.00 7.00 7.00 7.04 7.04 3.90 3.90 3.90 3.90 3.90 3.90\n [91] 3.90 3.90 3.90 3.90 3.90 3.90 2.04 2.04 2.04 2.04 2.04 2.04 2.04 2.04 2.04\n[106] 2.04 2.04 2.04 2.15 2.15 2.15 2.15 2.15 2.15 2.15 2.16 2.16 2.16 2.16 2.16\n[121] 2.35 2.35 2.35 2.35 2.35 2.35 2.35 2.35 2.35 2.35 2.35 2.35 6.38 6.38 6.38\n[136] 6.38 6.38 6.38 6.38 6.38 6.38 6.38 6.38 6.38 3.90 3.90 3.90 3.90 3.90 3.90\n[151] 3.90 3.90 3.90 3.90 3.90 3.90 2.04 2.04 2.04 2.04 2.04 2.04 2.04 2.04 2.04\n[166] 2.04 2.04 2.04 2.15 2.15 2.15 2.15 2.15 2.15 2.15 2.15 2.15 2.15 2.15 2.15\n[181] 2.48 2.48 2.48 2.42 2.35 2.35 2.42 2.35 2.35 2.35 2.35 2.35 6.46 6.46 6.46\n[196] 6.46 6.46 6.46 6.46 6.42 6.38 6.38 6.38 6.38 3.90 3.90 3.90 3.90 3.90 3.90\n[211] 3.90 3.90 3.90 3.90 3.90 3.90 2.04 2.04 2.04 2.04 2.04 2.04 2.04 2.04 2.04\n[226] 2.04 2.04 2.04 2.22 2.22 2.22 2.22 2.22 2.22 2.22 2.19 2.15 2.15 2.15 2.15\n[241] 2.48 2.48 2.48 2.48 2.48 2.48 2.48 2.48 2.48 2.48 2.48 2.48 6.46 6.46 6.46\n[256] 6.46 6.46 6.46 6.46 6.46 6.46 6.46 6.46 6.46 3.90 3.90 3.90 3.90 3.90 3.90\n[271] 3.90 3.90 3.90 3.90 3.90 3.90 2.04 2.04 2.04 2.04 2.04 2.04 2.04 2.04 2.04\n[286] 2.04 2.04 2.04 2.22 2.22 2.22 2.22 2.22 2.22 2.22 2.22 2.22 2.22 2.22 2.22\n[301] 2.20 2.20 2.20 2.20 2.20 2.48 2.48 2.48 2.48 2.48 2.48 2.48 6.46 6.46 6.46\n[316] 6.46 6.46 6.46 6.46 6.46 6.46 6.46 6.46 6.46 3.90 3.90 3.90 3.90 3.90 3.90\n[331] 3.90 3.90 3.90 3.90 3.90 3.90 2.04 2.04 2.04 2.04 2.04 2.04 2.04 2.04 2.04\n[346] 2.04 2.04 2.04 2.22 2.22 2.22 2.22 2.22 2.22 2.22 2.22 2.22 2.22 2.22 2.22\n[361] 2.20 2.20 2.20 2.20 2.20 2.20 2.20 2.20 2.20 2.20 2.20 2.20 6.46 6.46 6.46\n[376] 6.46 6.46 6.46 6.46 6.46 6.46 6.46 6.46 6.46 3.90 3.90 3.90 3.90 3.90 3.90\n[391] 3.90 3.90 3.90 3.90 3.90 3.90 2.04 2.04 2.04 2.04 2.04 2.04 2.04 2.04 2.04\n[406] 2.04 2.04 2.04 2.22 2.22 2.22 2.22 2.22 2.22 2.22 2.22 2.22 2.22 2.22 2.22\n[421] 2.17 2.17 2.20 2.20 2.20 2.20 2.20 2.20 2.20 2.20 2.20 2.20 6.46 6.46 6.46\n[436] 6.46 6.46 6.46 6.46 6.46 6.46 6.46 6.46 6.46 3.90 3.90 3.90 3.90 3.90 3.90\n[451] 3.90 3.90 3.90 3.90 3.90 3.90 2.04 2.04 2.04 2.04 2.04 2.04 2.04 2.04 2.04\n[466] 2.04 2.04 2.04 2.22 2.22 2.22 2.22 2.22 2.22 2.22 2.22 2.22 2.22 2.22 2.22\n[481] 2.17 2.17 2.17 2.17 2.17 2.17 2.17 2.17 2.17 2.17 2.17 2.17 6.44 6.46 6.46\n[496] 6.46 6.46 6.46 6.46 6.46 6.46 6.46 6.46 6.46 3.90 3.90 3.90 3.90 3.90 3.90\n[511] 3.90 3.90 3.90 3.90 3.90 3.90 2.04 2.04 2.04 2.04 2.04 2.04 2.04 2.04 2.04\n[526] 2.04 2.04 2.04 2.13 2.22 2.22 2.22 2.22 2.22 2.22 2.22 2.22 2.22 2.22 2.22\n[541] 1.98 1.98 2.09 2.12 2.14 2.16 2.17 2.17 2.17 2.17 2.17 2.17 6.46 6.42 6.42\n[556] 6.42 6.42 6.41 6.42 6.42 6.42 6.42 6.42 6.42   NA   NA   NA   NA   NA   NA\n[571] 3.90 3.90 3.90 3.90 3.90 3.90 1.94 1.94 1.94 1.94 1.94 2.02 2.04 2.04 2.04\n[586] 2.04 2.04 2.04   NA 2.03 2.03 2.03 2.03 2.00 2.00 2.00 2.00 2.00 2.00 2.00\n```\n:::\n:::\n\n\nAny additional comments?\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}