{
  "hash": "680ea9ba6a2310c57ff75cc9dd822b57",
  "result": {
    "markdown": "---\ntitle: \"Challenge 6 - Hotel Bookings\"\nauthor: \"Srujan Kagitala\"\ndescription: \"Visualizing Time and Relationships\"\ndate: \"6/30/2023\"\nformat:\n  html:\n    toc: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_6\n  - hotel_bookings\n  - srujan_kagitala\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(ggplot2)\n\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\n```\n:::\n\n\n## Challenge Overview\n\nToday's challenge is to:\n\n1)  read in a data set, and describe the data set using both words and any supporting information (e.g., tables, etc)\n2)  tidy data (as needed, including sanity checks)\n3)  mutate variables as needed (including sanity checks)\n4)  create at least one graph including time (evolution)\n   - try to make them \"publication\" ready (optional)\n   - Explain why you choose the specific graph type\n5)  Create at least one graph depicting part-whole or flow relationships\n   - try to make them \"publication\" ready (optional)\n   - Explain why you choose the specific graph type\n\n[R Graph Gallery](https://r-graph-gallery.com/) is a good starting point for thinking about what information is conveyed in standard graph types, and includes example R code.\n\n(be sure to only include the category tags for the data you use!)\n\n## Read in data\n\nRead in one (or more) of the following datasets, using the correct R package and command.\n  - hotel_bookings ⭐⭐⭐⭐\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbooking_data <- read_csv(\"_data/hotel_bookings.csv\")\nhead(booking_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 32\n  hotel        is_canceled lead_time arrival_date_year arrival_date_month\n  <chr>              <dbl>     <dbl>             <dbl> <chr>             \n1 Resort Hotel           0       342              2015 July              \n2 Resort Hotel           0       737              2015 July              \n3 Resort Hotel           0         7              2015 July              \n4 Resort Hotel           0        13              2015 July              \n5 Resort Hotel           0        14              2015 July              \n6 Resort Hotel           0        14              2015 July              \n# ℹ 27 more variables: arrival_date_week_number <dbl>,\n#   arrival_date_day_of_month <dbl>, stays_in_weekend_nights <dbl>,\n#   stays_in_week_nights <dbl>, adults <dbl>, children <dbl>, babies <dbl>,\n#   meal <chr>, country <chr>, market_segment <chr>,\n#   distribution_channel <chr>, is_repeated_guest <dbl>,\n#   previous_cancellations <dbl>, previous_bookings_not_canceled <dbl>,\n#   reserved_room_type <chr>, assigned_room_type <chr>, …\n```\n:::\n:::\n\n\nMost of the tidying is similar to challenge 4.\n\n### Briefly describe the data\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Number of bookings per hotel.\nno_bookings_by_hotel <- booking_data %>%\n  group_by(hotel) %>%\n  summarise(count = n())\n```\n:::\n\n\nThis data set contains booking data of City Hotel, Resort Hotel. It contains 119390 bookings information. 79330 and 40060 observations are respectively captured from City Hotel and Resort Hotel. The information available per booking are hotel, is_canceled, lead_time, arrival_date_year, arrival_date_month, arrival_date_week_number, arrival_date_day_of_month, stays_in_weekend_nights, stays_in_week_nights, adults, children, babies, meal, country, market_segment, distribution_channel, is_repeated_guest, previous_cancellations, previous_bookings_not_canceled, reserved_room_type, assigned_room_type, booking_changes, deposit_type, agent, company, days_in_waiting_list, customer_type, adr, required_car_parking_spaces, total_of_special_requests, reservation_status, reservation_status_date.\n\n## Tidy Data (as needed)\n\nIs your data already tidy, or is there work to be done? Be sure to anticipate your end result to provide a sanity check, and document your work here.\n\nAll character variables have to be converted to factor to get valuable insights from summary. We can drop 'arrival_date_week_number' variable because this is redundant information. If we want to do some analysis to find effective marketing strategies,we need to drop rows with NA values(Undefined) for distribution_channel and market_segment variables. After all this pre processing, we will be left with observations less than or equal to 119390 and 31 columns.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Drop rows with NA values for market_segment, distribution_channel.\n# Convert character variables to factor.\n# Drop arrival_date_week_number variable.\nclean_booking_data <- booking_data %>%\n  filter(distribution_channel != \"Undefined\",\n         market_segment != \"Undefined\") %>%\n  mutate_if(is.character, as.factor) %>%\n  select (-arrival_date_week_number)\n\nsummary(clean_booking_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          hotel        is_canceled       lead_time   arrival_date_year\n City Hotel  :79326   Min.   :0.0000   Min.   :  0   Min.   :2015     \n Resort Hotel:40059   1st Qu.:0.0000   1st Qu.: 18   1st Qu.:2016     \n                      Median :0.0000   Median : 69   Median :2016     \n                      Mean   :0.3704   Mean   :104   Mean   :2016     \n                      3rd Qu.:1.0000   3rd Qu.:160   3rd Qu.:2017     \n                      Max.   :1.0000   Max.   :737   Max.   :2017     \n                                                                      \n arrival_date_month arrival_date_day_of_month stays_in_weekend_nights\n August :13873      Min.   : 1.0              Min.   : 0.0000        \n July   :12660      1st Qu.: 8.0              1st Qu.: 0.0000        \n May    :11791      Median :16.0              Median : 1.0000        \n October:11160      Mean   :15.8              Mean   : 0.9276        \n April  :11089      3rd Qu.:23.0              3rd Qu.: 2.0000        \n June   :10939      Max.   :31.0              Max.   :19.0000        \n (Other):47873                                                       \n stays_in_week_nights     adults          children           babies         \n Min.   : 0.0         Min.   : 0.000   Min.   : 0.0000   Min.   : 0.000000  \n 1st Qu.: 1.0         1st Qu.: 2.000   1st Qu.: 0.0000   1st Qu.: 0.000000  \n Median : 2.0         Median : 2.000   Median : 0.0000   Median : 0.000000  \n Mean   : 2.5         Mean   : 1.856   Mean   : 0.1039   Mean   : 0.007949  \n 3rd Qu.: 3.0         3rd Qu.: 2.000   3rd Qu.: 0.0000   3rd Qu.: 0.000000  \n Max.   :50.0         Max.   :55.000   Max.   :10.0000   Max.   :10.000000  \n                                                                            \n        meal          country            market_segment  distribution_channel\n BB       :92306   PRT    :48585   Aviation     :  237   Corporate: 6677     \n FB       :  798   GBR    :12129   Complementary:  743   Direct   :14645     \n HB       :14462   FRA    :10415   Corporate    : 5295   GDS      :  193     \n SC       :10650   ESP    : 8568   Direct       :12604   TA/TO    :97870     \n Undefined: 1169   DEU    : 7287   Groups       :19811                       \n                   ITA    : 3766   Offline TA/TO:24219                       \n                   (Other):28635   Online TA    :56476                       \n is_repeated_guest previous_cancellations previous_bookings_not_canceled\n Min.   :0.00000   Min.   : 0.00000       Min.   : 0.0000               \n 1st Qu.:0.00000   1st Qu.: 0.00000       1st Qu.: 0.0000               \n Median :0.00000   Median : 0.00000       Median : 0.0000               \n Mean   :0.03191   Mean   : 0.08712       Mean   : 0.1371               \n 3rd Qu.:0.00000   3rd Qu.: 0.00000       3rd Qu.: 0.0000               \n Max.   :1.00000   Max.   :26.00000       Max.   :72.0000               \n                                                                        \n reserved_room_type assigned_room_type booking_changes       deposit_type   \n A      :85993      A      :74052      Min.   : 0.0000   No Deposit:104636  \n D      :19201      D      :25322      1st Qu.: 0.0000   Non Refund: 14587  \n E      : 6535      E      : 7806      Median : 0.0000   Refundable:   162  \n F      : 2897      F      : 3751      Mean   : 0.2211                      \n G      : 2094      G      : 2553      3rd Qu.: 0.0000                      \n B      : 1114      C      : 2375      Max.   :21.0000                      \n (Other): 1551      (Other): 3526                                           \n     agent          company       days_in_waiting_list         customer_type  \n 9      :31960   NULL   :112588   Min.   :  0.000      Contract       : 4076  \n NULL   :16337   40     :   927   1st Qu.:  0.000      Group          :  577  \n 240    :13922   223    :   784   Median :  0.000      Transient      :89612  \n 1      : 7191   67     :   267   Mean   :  2.321      Transient-Party:25120  \n 14     : 3639   45     :   250   3rd Qu.:  0.000                             \n 7      : 3539   153    :   215   Max.   :391.000                             \n (Other):42797   (Other):  4354                                               \n      adr          required_car_parking_spaces total_of_special_requests\n Min.   :  -6.38   Min.   :0.00000             Min.   :0.0000           \n 1st Qu.:  69.29   1st Qu.:0.00000             1st Qu.:0.0000           \n Median :  94.59   Median :0.00000             Median :0.0000           \n Mean   : 101.83   Mean   :0.06251             Mean   :0.5713           \n 3rd Qu.: 126.00   3rd Qu.:0.00000             3rd Qu.:1.0000           \n Max.   :5400.00   Max.   :8.00000             Max.   :5.0000           \n                                                                        \n reservation_status reservation_status_date\n Canceled :43013    Min.   :2014-10-17     \n Check-Out:75165    1st Qu.:2016-02-02     \n No-Show  : 1207    Median :2016-08-07     \n                    Mean   :2016-07-30     \n                    3rd Qu.:2017-02-08     \n                    Max.   :2017-09-14     \n                                           \n```\n:::\n:::\n\n\nSo, we have 119385 observations and 31 columns after cleaning the data.\n\nAre there any variables that require mutation to be usable in your analysis stream? For example, do you need to calculate new values in order to graph them? Can string values be represented numerically? Do you need to turn any variables into factors and reorder for ease of graphics and visualization?\n\nThere are three independent variables for arrival_date_year, arrival_date_month, arrival_date_day_of_month which is unnecessary. Hence, they can be combined to one variable arrival_date. But we will preserve arrival_year to show some interesting visualizations. Also, variables like is_canceled, is_repeated_guest have to be converted to Boolean instead of integer for readability. We will be left with 30 columns after this step.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# combine day, month and year columns to date column.\n# Remove arrival_date_week_number_column.\nbooking_data_tidy <- clean_booking_data %>%\n  mutate(arrival_date = as.Date(paste(arrival_date_month,\n                                      arrival_date_day_of_month,\n                                      arrival_date_year, sep = \"-\"),\n                                format=\"%B-%d-%Y\"),\n         is_repeated_guest = as.logical(is_repeated_guest),\n         is_canceled = as.logical(is_canceled)) %>%\n  select(-arrival_date_month,\n         -arrival_date_day_of_month)\n\nhead(booking_data_tidy)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 30\n  hotel        is_canceled lead_time arrival_date_year stays_in_weekend_nights\n  <fct>        <lgl>           <dbl>             <dbl>                   <dbl>\n1 Resort Hotel FALSE             342              2015                       0\n2 Resort Hotel FALSE             737              2015                       0\n3 Resort Hotel FALSE               7              2015                       0\n4 Resort Hotel FALSE              13              2015                       0\n5 Resort Hotel FALSE              14              2015                       0\n6 Resort Hotel FALSE              14              2015                       0\n# ℹ 25 more variables: stays_in_week_nights <dbl>, adults <dbl>,\n#   children <dbl>, babies <dbl>, meal <fct>, country <fct>,\n#   market_segment <fct>, distribution_channel <fct>, is_repeated_guest <lgl>,\n#   previous_cancellations <dbl>, previous_bookings_not_canceled <dbl>,\n#   reserved_room_type <fct>, assigned_room_type <fct>, booking_changes <dbl>,\n#   deposit_type <fct>, agent <fct>, company <fct>, days_in_waiting_list <dbl>,\n#   customer_type <fct>, adr <dbl>, required_car_parking_spaces <dbl>, …\n```\n:::\n:::\n\n\nSo, we have 119385 observations and 30 columns after combing all the date related variables to \"arrival_date\" variable.\n\n## Time Dependent Visualization\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntotal_hotel_bookings_by_year <- clean_booking_data %>%\n  group_by(hotel, arrival_date_year) %>%\n  summarise(no_bookings = n())\n\nggplot(total_hotel_bookings_by_year,\n       aes(x= arrival_date_year, y = no_bookings, colour = hotel)) + \n  geom_line() +\n  scale_x_continuous(breaks = c(2015, 2016, 2017),\n                     labels = c(\"2015\", \"2016\", \"2017\")) +\n  theme_linedraw()+\n  labs(title = \"Bookings of hotels across years\",\n       x = \"Year\",\n       y = \"Number of bookings\")\n```\n\n::: {.cell-output-display}\n![](challenge6_srujankagitala_files/figure-html/time_plot-1.png){width=672}\n:::\n:::\n\n\n## Visualizing Part-Whole Relationships\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(distribution_channel_data <- clean_booking_data %>%\n  group_by(hotel, distribution_channel) %>%\n  summarise(count = n()) %>%\n  mutate(percent = count * 100 / sum(count),\n         id = LETTERS[row_number()]))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 7 × 5\n# Groups:   hotel [2]\n  hotel        distribution_channel count percent id   \n  <fct>        <fct>                <int>   <dbl> <chr>\n1 City Hotel   Corporate             3408   4.30  A    \n2 City Hotel   Direct                6780   8.55  B    \n3 City Hotel   GDS                    193   0.243 C    \n4 City Hotel   TA/TO                68945  86.9   D    \n5 Resort Hotel Corporate             3269   8.16  A    \n6 Resort Hotel Direct                7865  19.6   B    \n7 Resort Hotel TA/TO                28925  72.2   C    \n```\n:::\n\n```{.r .cell-code}\n# pie chart of above room distribution data\nggplot(distribution_channel_data, \n       aes(x = \"\", y = percent,\n           fill = paste(id,' - ',distribution_channel,'(',round(percent,2),'%)'))) +\n  geom_bar(width = 10, stat = \"identity\", color = \"black\") +\n  geom_text(aes(x = 2.5, label = id), \n            position = position_stack(vjust=0.5),\n            color = \"black\") +\n  coord_polar(\"y\", start = 0) +\n  theme(axis.title.y = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks.y = element_blank(),\n        axis.title.x = element_blank(),\n        axis.text.x = element_blank(),\n        axis.ticks.x = element_blank(),) +\n  facet_wrap(~hotel) +\n  theme_void() +\n  labs(title = \"Distribution channel of Hotels\",\n       fill = \"Channel\")\n```\n\n::: {.cell-output-display}\n![](challenge6_srujankagitala_files/figure-html/part-whole_plot-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "challenge6_srujankagitala_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}