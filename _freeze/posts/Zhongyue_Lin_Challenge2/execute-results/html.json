{
  "hash": "d68ea26d8de572d1c3ed34c810250c8a",
  "result": {
    "markdown": "---\ntitle: \"Challenge 2_Solution \"\nauthor: \"Zhongyue Lin\"\ndescription: \"Data wrangling: using group() and summarise()\"\ndate: \"6/1/2023\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_2\n  - railroads\n  - faostat\n  - hotel_bookings\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\n```\n:::\n\n\n## Challenge Overview\n\nToday's challenge is to\n\n1)  read in a data set, and describe the data using both words and any supporting information (e.g., tables, etc)\n2)  provide summary statistics for different interesting groups within the data, and interpret those statistics\n\n## Read in the Data\n\n-   hotel_bookings.csv ⭐⭐⭐⭐ In\n\nIn this challenge 2 I chose the **hotel_bookings.csv** dataset as the raw data for the analysis\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Data Import\nhotel_bookings <- read_csv(\"_data/hotel_bookings.csv\")\n```\n:::\n\n\n## Describe the data\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Preview the first few rows of data\nhead(hotel_bookings)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 32\n  hotel   is_ca…¹ lead_…² arriv…³ arriv…⁴ arriv…⁵ arriv…⁶ stays…⁷ stays…⁸ adults\n  <chr>     <dbl>   <dbl>   <dbl> <chr>     <dbl>   <dbl>   <dbl>   <dbl>  <dbl>\n1 Resort…       0     342    2015 July         27       1       0       0      2\n2 Resort…       0     737    2015 July         27       1       0       0      2\n3 Resort…       0       7    2015 July         27       1       0       1      1\n4 Resort…       0      13    2015 July         27       1       0       1      1\n5 Resort…       0      14    2015 July         27       1       0       2      2\n6 Resort…       0      14    2015 July         27       1       0       2      2\n# … with 22 more variables: children <dbl>, babies <dbl>, meal <chr>,\n#   country <chr>, market_segment <chr>, distribution_channel <chr>,\n#   is_repeated_guest <dbl>, previous_cancellations <dbl>,\n#   previous_bookings_not_canceled <dbl>, reserved_room_type <chr>,\n#   assigned_room_type <chr>, booking_changes <dbl>, deposit_type <chr>,\n#   agent <chr>, company <chr>, days_in_waiting_list <dbl>,\n#   customer_type <chr>, adr <dbl>, required_car_parking_spaces <dbl>, …\n```\n:::\n\n```{.r .cell-code}\n# Display the dimension of the data frame\nprint(paste(\"The dataset has\", dim(hotel_bookings)[1], \"rows and\", dim(hotel_bookings)[2], \"columns.\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"The dataset has 119390 rows and 32 columns.\"\n```\n:::\n:::\n\n\nA quick preview of the data was performed after reading, and the `head()`function and `dim()` function were used to observe the underlying information of the data set (**119,390** rows **32** columns).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Check the type of each variable\nvar_types <- sapply(hotel_bookings, class)\n\n# Calculate the total number of variables\ntotal_vars <- length(var_types)\n\n# Calculate the number of numerical and categorical variables\nnum_vars <- sum(var_types == \"numeric\" | var_types == \"integer\")\ncat_vars <- sum(var_types == \"factor\" | var_types == \"character\")\n\n# Output results\ncat(\"Total variables: \", total_vars, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTotal variables:  32 \n```\n:::\n\n```{.r .cell-code}\ncat(\"Numeric variables: \", num_vars, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNumeric variables:  18 \n```\n:::\n\n```{.r .cell-code}\ncat(\"Categorical variables: \", cat_vars, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCategorical variables:  13 \n```\n:::\n\n```{.r .cell-code}\nstr(hotel_bookings)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nspc_tbl_ [119,390 × 32] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ hotel                         : chr [1:119390] \"Resort Hotel\" \"Resort Hotel\" \"Resort Hotel\" \"Resort Hotel\" ...\n $ is_canceled                   : num [1:119390] 0 0 0 0 0 0 0 0 1 1 ...\n $ lead_time                     : num [1:119390] 342 737 7 13 14 14 0 9 85 75 ...\n $ arrival_date_year             : num [1:119390] 2015 2015 2015 2015 2015 ...\n $ arrival_date_month            : chr [1:119390] \"July\" \"July\" \"July\" \"July\" ...\n $ arrival_date_week_number      : num [1:119390] 27 27 27 27 27 27 27 27 27 27 ...\n $ arrival_date_day_of_month     : num [1:119390] 1 1 1 1 1 1 1 1 1 1 ...\n $ stays_in_weekend_nights       : num [1:119390] 0 0 0 0 0 0 0 0 0 0 ...\n $ stays_in_week_nights          : num [1:119390] 0 0 1 1 2 2 2 2 3 3 ...\n $ adults                        : num [1:119390] 2 2 1 1 2 2 2 2 2 2 ...\n $ children                      : num [1:119390] 0 0 0 0 0 0 0 0 0 0 ...\n $ babies                        : num [1:119390] 0 0 0 0 0 0 0 0 0 0 ...\n $ meal                          : chr [1:119390] \"BB\" \"BB\" \"BB\" \"BB\" ...\n $ country                       : chr [1:119390] \"PRT\" \"PRT\" \"GBR\" \"GBR\" ...\n $ market_segment                : chr [1:119390] \"Direct\" \"Direct\" \"Direct\" \"Corporate\" ...\n $ distribution_channel          : chr [1:119390] \"Direct\" \"Direct\" \"Direct\" \"Corporate\" ...\n $ is_repeated_guest             : num [1:119390] 0 0 0 0 0 0 0 0 0 0 ...\n $ previous_cancellations        : num [1:119390] 0 0 0 0 0 0 0 0 0 0 ...\n $ previous_bookings_not_canceled: num [1:119390] 0 0 0 0 0 0 0 0 0 0 ...\n $ reserved_room_type            : chr [1:119390] \"C\" \"C\" \"A\" \"A\" ...\n $ assigned_room_type            : chr [1:119390] \"C\" \"C\" \"C\" \"A\" ...\n $ booking_changes               : num [1:119390] 3 4 0 0 0 0 0 0 0 0 ...\n $ deposit_type                  : chr [1:119390] \"No Deposit\" \"No Deposit\" \"No Deposit\" \"No Deposit\" ...\n $ agent                         : chr [1:119390] \"NULL\" \"NULL\" \"NULL\" \"304\" ...\n $ company                       : chr [1:119390] \"NULL\" \"NULL\" \"NULL\" \"NULL\" ...\n $ days_in_waiting_list          : num [1:119390] 0 0 0 0 0 0 0 0 0 0 ...\n $ customer_type                 : chr [1:119390] \"Transient\" \"Transient\" \"Transient\" \"Transient\" ...\n $ adr                           : num [1:119390] 0 0 75 75 98 ...\n $ required_car_parking_spaces   : num [1:119390] 0 0 0 0 0 0 0 0 0 0 ...\n $ total_of_special_requests     : num [1:119390] 0 0 0 0 1 1 0 1 1 0 ...\n $ reservation_status            : chr [1:119390] \"Check-Out\" \"Check-Out\" \"Check-Out\" \"Check-Out\" ...\n $ reservation_status_date       : Date[1:119390], format: \"2015-07-01\" \"2015-07-01\" ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   hotel = col_character(),\n  ..   is_canceled = col_double(),\n  ..   lead_time = col_double(),\n  ..   arrival_date_year = col_double(),\n  ..   arrival_date_month = col_character(),\n  ..   arrival_date_week_number = col_double(),\n  ..   arrival_date_day_of_month = col_double(),\n  ..   stays_in_weekend_nights = col_double(),\n  ..   stays_in_week_nights = col_double(),\n  ..   adults = col_double(),\n  ..   children = col_double(),\n  ..   babies = col_double(),\n  ..   meal = col_character(),\n  ..   country = col_character(),\n  ..   market_segment = col_character(),\n  ..   distribution_channel = col_character(),\n  ..   is_repeated_guest = col_double(),\n  ..   previous_cancellations = col_double(),\n  ..   previous_bookings_not_canceled = col_double(),\n  ..   reserved_room_type = col_character(),\n  ..   assigned_room_type = col_character(),\n  ..   booking_changes = col_double(),\n  ..   deposit_type = col_character(),\n  ..   agent = col_character(),\n  ..   company = col_character(),\n  ..   days_in_waiting_list = col_double(),\n  ..   customer_type = col_character(),\n  ..   adr = col_double(),\n  ..   required_car_parking_spaces = col_double(),\n  ..   total_of_special_requests = col_double(),\n  ..   reservation_status = col_character(),\n  ..   reservation_status_date = col_date(format = \"\")\n  .. )\n - attr(*, \"problems\")=<externalptr> \n```\n:::\n:::\n\n\nHowever, since the `dim()` function cannot count the number of different kinds of variables in the dataset, I used the `sapply()` function to construct a code that classifies the variables in the dataset (**numeric variables: 18**,**categorical variables 13**). However, the total number of variables in the dataset is **32**, and after using `str()`double check, I found that **\"reservation_status_date\"** is a date type variable.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Summary statistics on the data\nsummary(hotel_bookings)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    hotel            is_canceled       lead_time   arrival_date_year\n Length:119390      Min.   :0.0000   Min.   :  0   Min.   :2015     \n Class :character   1st Qu.:0.0000   1st Qu.: 18   1st Qu.:2016     \n Mode  :character   Median :0.0000   Median : 69   Median :2016     \n                    Mean   :0.3704   Mean   :104   Mean   :2016     \n                    3rd Qu.:1.0000   3rd Qu.:160   3rd Qu.:2017     \n                    Max.   :1.0000   Max.   :737   Max.   :2017     \n                                                                    \n arrival_date_month arrival_date_week_number arrival_date_day_of_month\n Length:119390      Min.   : 1.00            Min.   : 1.0             \n Class :character   1st Qu.:16.00            1st Qu.: 8.0             \n Mode  :character   Median :28.00            Median :16.0             \n                    Mean   :27.17            Mean   :15.8             \n                    3rd Qu.:38.00            3rd Qu.:23.0             \n                    Max.   :53.00            Max.   :31.0             \n                                                                      \n stays_in_weekend_nights stays_in_week_nights     adults      \n Min.   : 0.0000         Min.   : 0.0         Min.   : 0.000  \n 1st Qu.: 0.0000         1st Qu.: 1.0         1st Qu.: 2.000  \n Median : 1.0000         Median : 2.0         Median : 2.000  \n Mean   : 0.9276         Mean   : 2.5         Mean   : 1.856  \n 3rd Qu.: 2.0000         3rd Qu.: 3.0         3rd Qu.: 2.000  \n Max.   :19.0000         Max.   :50.0         Max.   :55.000  \n                                                              \n    children           babies              meal             country         \n Min.   : 0.0000   Min.   : 0.000000   Length:119390      Length:119390     \n 1st Qu.: 0.0000   1st Qu.: 0.000000   Class :character   Class :character  \n Median : 0.0000   Median : 0.000000   Mode  :character   Mode  :character  \n Mean   : 0.1039   Mean   : 0.007949                                        \n 3rd Qu.: 0.0000   3rd Qu.: 0.000000                                        \n Max.   :10.0000   Max.   :10.000000                                        \n NA's   :4                                                                  \n market_segment     distribution_channel is_repeated_guest\n Length:119390      Length:119390        Min.   :0.00000  \n Class :character   Class :character     1st Qu.:0.00000  \n Mode  :character   Mode  :character     Median :0.00000  \n                                         Mean   :0.03191  \n                                         3rd Qu.:0.00000  \n                                         Max.   :1.00000  \n                                                          \n previous_cancellations previous_bookings_not_canceled reserved_room_type\n Min.   : 0.00000       Min.   : 0.0000                Length:119390     \n 1st Qu.: 0.00000       1st Qu.: 0.0000                Class :character  \n Median : 0.00000       Median : 0.0000                Mode  :character  \n Mean   : 0.08712       Mean   : 0.1371                                  \n 3rd Qu.: 0.00000       3rd Qu.: 0.0000                                  \n Max.   :26.00000       Max.   :72.0000                                  \n                                                                         \n assigned_room_type booking_changes   deposit_type          agent          \n Length:119390      Min.   : 0.0000   Length:119390      Length:119390     \n Class :character   1st Qu.: 0.0000   Class :character   Class :character  \n Mode  :character   Median : 0.0000   Mode  :character   Mode  :character  \n                    Mean   : 0.2211                                        \n                    3rd Qu.: 0.0000                                        \n                    Max.   :21.0000                                        \n                                                                           \n   company          days_in_waiting_list customer_type           adr         \n Length:119390      Min.   :  0.000      Length:119390      Min.   :  -6.38  \n Class :character   1st Qu.:  0.000      Class :character   1st Qu.:  69.29  \n Mode  :character   Median :  0.000      Mode  :character   Median :  94.58  \n                    Mean   :  2.321                         Mean   : 101.83  \n                    3rd Qu.:  0.000                         3rd Qu.: 126.00  \n                    Max.   :391.000                         Max.   :5400.00  \n                                                                             \n required_car_parking_spaces total_of_special_requests reservation_status\n Min.   :0.00000             Min.   :0.0000            Length:119390     \n 1st Qu.:0.00000             1st Qu.:0.0000            Class :character  \n Median :0.00000             Median :0.0000            Mode  :character  \n Mean   :0.06252             Mean   :0.5714                              \n 3rd Qu.:0.00000             3rd Qu.:1.0000                              \n Max.   :8.00000             Max.   :5.0000                              \n                                                                         \n reservation_status_date\n Min.   :2014-10-17     \n 1st Qu.:2016-02-01     \n Median :2016-08-07     \n Mean   :2016-07-30     \n 3rd Qu.:2017-02-08     \n Max.   :2017-09-14     \n                        \n```\n:::\n:::\n\nThen use the `summary()` function to perform a statistical summary of the dataset, but the `summary()` function does not perform a statistical summary of the nominal data.\n\n::: {.cell}\n\n```{.r .cell-code}\n#Identify non-numeric (categorical) variables in the dataframe\nnon_numeric_vars <- sapply(hotel_bookings, function(x) !is.numeric(x))\n\n# Subset your dataframe to include only these variables\nnon_numeric_data <- hotel_bookings[, non_numeric_vars]\n\n#Now can now operate on \"non-numeric data\". For example, the \"hotel\" variable\nsummary_list <- lapply(names(non_numeric_data), function(var_name) {\n  freq_table <- table(non_numeric_data[[var_name]])\n  freq_df <- as.data.frame(freq_table)\n  colnames(freq_df) <- c(\"Level\", \"Frequency\")\n  \n  return(freq_df)\n})\n\nnames(summary_list) <- names(non_numeric_data)\nprint(summary_list$hotel)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         Level Frequency\n1   City Hotel     79330\n2 Resort Hotel     40060\n```\n:::\n:::\n\nTo compensate for the statistical subsidy of the `summary()` function on non-numeric variables, I used `lapply()` for frequency statistics on non-numeric variables.\n\n## Provide Grouped Summary Statistics\nIf I were a data analyst for a hotel company, I would be very interested in the **cancellation rate** data, so I chose to explore the relationship between the cancellation rate and other characteristics data when I conducted further data exploration.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Grouping hotel types and calculating cancellation rates and average booking lead times\nhotel_stats <- hotel_bookings %>%\n  group_by(hotel) %>%\n  summarise(\n    count = n(),\n    cancel_rate = mean(is_canceled),\n    avg_lead_time = mean(lead_time),\n  )\n\n# Grouping of meal types and calculation of cancellation rates\nmeal_stats <- hotel_bookings %>%\n  group_by(meal) %>%\n  summarise(\n    count = n(),\n    cancel_rate = mean(is_canceled),\n  )\n\n# Group the number of special requests and calculate the cancellation rate\nrequests_stats <- hotel_bookings %>%\n  group_by(total_of_special_requests) %>%\n  summarise(\n    count = n(),\n    cancel_rate = mean(is_canceled),\n  )\n\n# Grouping customer types and calculating cancellation rates and average booking lead times\ncustomer_stats <- hotel_bookings %>%\n  group_by(customer_type) %>%\n  summarise(\n    count = n(),\n    cancel_rate = mean(is_canceled),\n    avg_lead_time = mean(lead_time),\n  )\n\n# Grouping booking intervals and calculating cancellation rates\nwaiting_stats <- hotel_bookings %>%\n  filter(days_in_waiting_list > 0) %>%\n  summarise(\n    count = n(),\n    cancel_rate = mean(is_canceled),\n  )\n\n# Print the corresponding statistics\nprint(hotel_stats)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 4\n  hotel        count cancel_rate avg_lead_time\n  <chr>        <int>       <dbl>         <dbl>\n1 City Hotel   79330       0.417         110. \n2 Resort Hotel 40060       0.278          92.7\n```\n:::\n\n```{.r .cell-code}\nprint(meal_stats)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 3\n  meal      count cancel_rate\n  <chr>     <int>       <dbl>\n1 BB        92310       0.374\n2 FB          798       0.599\n3 HB        14463       0.345\n4 SC        10650       0.372\n5 Undefined  1169       0.245\n```\n:::\n\n```{.r .cell-code}\nprint(requests_stats)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 3\n  total_of_special_requests count cancel_rate\n                      <dbl> <int>       <dbl>\n1                         0 70318       0.477\n2                         1 33226       0.220\n3                         2 12969       0.221\n4                         3  2497       0.179\n5                         4   340       0.106\n6                         5    40       0.05 \n```\n:::\n\n```{.r .cell-code}\nprint(customer_stats)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 4\n  customer_type   count cancel_rate avg_lead_time\n  <chr>           <int>       <dbl>         <dbl>\n1 Contract         4076       0.310         143. \n2 Group             577       0.102          55.1\n3 Transient       89613       0.407          93.3\n4 Transient-Party 25124       0.254         137. \n```\n:::\n\n```{.r .cell-code}\nprint(waiting_stats)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 2\n  count cancel_rate\n  <int>       <dbl>\n1  3698       0.638\n```\n:::\n:::\n\n\n### Explain and Interpret\n\nIn  exploratory data analysis of hotel booking behavior, I focused on specific groupings such as hotel type, meal type, number of special requests, customer type, and booking interval. We observed that city hotels (**79,330 bookings**) had significantly higher bookings and cancellation rates (**41.73%**) than resort hotels (**40,060 bookings**, **27.76% cancellation rate**), potentially due to their location and diverse clientele.\n\nRegarding meal type, although Full Board (**FB**) had the fewest bookings (**798**), it had the highest cancellation rate (**59.90%**), which might be due to its high price. As the number of special requests increased, the cancellation rate tended to decrease, suggesting that customers with specific demands are more likely to stick to their reservations.\n\nTransient customers made the most bookings (**89,613**), but also had a relatively high cancellation rate (**40.75%**). On the other hand, Contract and Transient-Party customers had lower cancellation rates, **30.96%** and **25.43%** respectively, possibly due to group booking nature reducing cancellation likelihood.\n\nRegarding the booking interval, we initially filtered reservations that had been waiting in the list for at least a day. Because for those reservations with no waiting time (i.e., booking interval of 0), calculating the cancellation rate may be meaningless. We found that bookings waiting in the list (**3,698**) were fewer than other categories but had a high cancellation rate of **63.79%**, suggesting that long waits might lead to cancellations.\n\nIt's important to note the limitations of statistical information. For instance, calculating an average cancellation rate could mask data distribution. If the data distribution is skewed, the average may not be a good measure. In this case, we might need to use other statistical methods such as median or mode to better describe the data.\n\nThese exploratory data analysis results provide some insights into hotel booking behavior but require further research and validation for a comprehensive understanding of factors influencing hotel booking behavior, enabling more accurate predictions and decisions.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}