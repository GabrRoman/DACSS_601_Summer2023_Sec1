{
  "hash": "e8691cd7ca1d2d08c128b536239211a5",
  "result": {
    "markdown": "---\ntitle: \"Eli Boahen | Tutorial 1\"\nauthor: \"Eli Boahen\"\ndescription: \"Eli's Walk through & completion of Tutorial 1\"\ndate: \"07/01/2023\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - Tutorial 1\n  - Eli Boahen\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nknitr::opts_chunk$set(echo = TRUE)\n```\n:::\n\n\nThis Tutorial teaches 4 topics: Math, Logical Evaluations, \n\n## Math ``` +, -, *, / ```\nR can do math. By creating a code block in our markdown file using 3 of this symbol ->  ( ` ), we can create mathematical expressions *then* press Crtl + Enter to run the single line of code.\n\n:::{.callout-warning}\nTip: ``` is the key on the top corner of your keyboard, not ''' which is 3 apostrophes \n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n12+2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 14\n```\n:::\n:::\n\n\n## Logical Data `==, >, <, >=, <=`\nR can do logic. Think of a `TRUE` or `FALSE` question:\nI have 2 apples. Do I have 2 apples?\n\n::: {.cell}\n\n```{.r .cell-code}\n2==2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\nThe line of code above will return `TRUE`\n\nNow `>`, `<`, `>=`, `<=` are all testing for greater than or less than. `>` and `<` test just for greater than or less than. `>=` and `<=` are testing if something is greater than *or* equal to another value.\n\nFor Example:\n\n::: {.cell}\n\n```{.r .cell-code}\n2>2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\n2>=2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\nThe first line of code returns `FALSE` because 2 is not greater than 2. But, the 2nd line returns `TRUE` because even though 2 is not greater than 2, 2 equals 2.\n\n:::{.callout-tip}\n## Inserting Code Into Your qmd File\nTip: We can make blocks of code by sandwiching it between this ( `` `) three times, and we can insert code into a sentence using those same symbols around a segment of code `'''Like this'''` or even `'Like this'`.\n:::\n\n## Assigning Variables `<-`\nOn the same wavelength of math, R can assign variables. This is seen in other programming languages too! What's different here--at least for me--is instead of using an equal sign like this `x=2` we use this symbol `<-` like this\n\n::: {.cell}\n\n```{.r .cell-code}\nx<-2\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n:::\n\n\nWe can build on that to do things like\n\n::: {.cell}\n\n```{.r .cell-code}\nx<-2\ny<-x-3\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] -1\n```\n:::\n:::\n\nOr even *more* intricate\n\n::: {.cell}\n\n```{.r .cell-code}\ny >= x\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\nx <- y*y\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n\n```{.r .cell-code}\ny >= x\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\ny <- y+2\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n\n```{.r .cell-code}\ny >= x\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\n:::{.callout-tip}\nThis can work without spaces around the `<-` but it's recommended to improve readability.\n:::\n\n## Vectors `c()`\nSo, variables can store 1 value, or the result of a mathematical expression\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 4\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n:::\n\nVectors store a list of values\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(2,4,6,8,10)\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  2  4  6  8 10\n```\n:::\n:::\n\n\nWe can apply math and logic to these lists too\nUsing the example from Tutorial 1\n\n::: {.cell}\n\n```{.r .cell-code}\nscores <- c(14,13,12,15,16,14,15,10,8,12)\nnew_scores <- c(13,12,11,9,12,13,15,12,6,14)\nnew_scores\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 13 12 11  9 12 13 15 12  6 14\n```\n:::\n\n```{.r .cell-code}\n#new_grades variable is calculated by dividing the new scores by 15\ngrades <- new_scores/15\ngrades\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 0.8666667 0.8000000 0.7333333 0.6000000 0.8000000 0.8666667 1.0000000\n [8] 0.8000000 0.4000000 0.9333333\n```\n:::\n\n```{.r .cell-code}\n#multiply new_grades by 100 for clean percentages\npercent_grades <- grades*100\npercent_grades\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  86.66667  80.00000  73.33333  60.00000  80.00000  86.66667 100.00000\n [8]  80.00000  40.00000  93.33333\n```\n:::\n\n```{.r .cell-code}\n#average the two quizzes together into final grades\navg <- ( percent_grades + ((scores/17)*100) )/2\navg\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 84.50980 78.23529 71.96078 74.11765 87.05882 84.50980 94.11765 69.41176\n [9] 43.52941 81.96078\n```\n:::\n\n```{.r .cell-code}\n#weight the grades by 5 points\ngrade_weighted <- avg + 5\ngrade_weighted\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 89.50980 83.23529 76.96078 79.11765 92.05882 89.50980 99.11765 74.41176\n [9] 48.52941 86.96078\n```\n:::\n:::\n\n\n\n## The End\nThis is the end of Tutorial 1. My name is Eli, and I'm off to Tutorial 2. Thanks!",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}