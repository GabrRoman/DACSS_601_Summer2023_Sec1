{
  "hash": "480f3f1eacfef4d6d1a4a76d5c3f610e",
  "result": {
    "markdown": "---\ntitle: \"Challenge_4_Solution\"\nauthor: \"Zhongyue Lin\"\ndescription: \"More data wrangling: pivoting\"\ndate: \"6/9/2023\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_4\n  - abc_poll\n  - eggs\n  - fed_rates\n  - hotel_bookings\n  - debt\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\n```\n:::\n\n\n## Challenge Overview\n\nToday's challenge is to:\n\n1)  read in a data set, and describe the data set using both words and any supporting information (e.g., tables, etc)\n2)  tidy data (as needed, including sanity checks)\n3)  identify variables that need to be mutated\n4)  mutate variables and sanity check all mutations\n\n## Read in data\n\nRead in one (or more) of the following datasets, using the correct R package and command.\n\n-   hotel_bookings.csv⭐⭐⭐⭐\n\nIn challenge 4, I chose hotel_bookings.csv as the original dataset. This dataset is the one I used in challenge 2.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- readr::read_csv(\"_data/hotel_bookings.csv\")\nhead(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 32\n  hotel   is_ca…¹ lead_…² arriv…³ arriv…⁴ arriv…⁵ arriv…⁶ stays…⁷ stays…⁸ adults\n  <chr>     <dbl>   <dbl>   <dbl> <chr>     <dbl>   <dbl>   <dbl>   <dbl>  <dbl>\n1 Resort…       0     342    2015 July         27       1       0       0      2\n2 Resort…       0     737    2015 July         27       1       0       0      2\n3 Resort…       0       7    2015 July         27       1       0       1      1\n4 Resort…       0      13    2015 July         27       1       0       1      1\n5 Resort…       0      14    2015 July         27       1       0       2      2\n6 Resort…       0      14    2015 July         27       1       0       2      2\n# … with 22 more variables: children <dbl>, babies <dbl>, meal <chr>,\n#   country <chr>, market_segment <chr>, distribution_channel <chr>,\n#   is_repeated_guest <dbl>, previous_cancellations <dbl>,\n#   previous_bookings_not_canceled <dbl>, reserved_room_type <chr>,\n#   assigned_room_type <chr>, booking_changes <dbl>, deposit_type <chr>,\n#   agent <chr>, company <chr>, days_in_waiting_list <dbl>,\n#   customer_type <chr>, adr <dbl>, required_car_parking_spaces <dbl>, …\n```\n:::\n:::\n\n\n### Briefly describe the data\n\nAccording to the EDA of this dataset in Challenge 2, it is understood that this dataset is about the data records of two hotels, **Resort hotel** and **City hotel**. The dataset contains customer data, business data and other related data. The data structure of this dataset is **119,390** rows **32** columns.\n\n## Tidy Data (as needed)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata %>%\n  summarize_all(function(x) sum(is.na(x)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 32\n  hotel is_canc…¹ lead_…² arriv…³ arriv…⁴ arriv…⁵ arriv…⁶ stays…⁷ stays…⁸ adults\n  <int>     <int>   <int>   <int>   <int>   <int>   <int>   <int>   <int>  <int>\n1     0         0       0       0       0       0       0       0       0      0\n# … with 22 more variables: children <int>, babies <int>, meal <int>,\n#   country <int>, market_segment <int>, distribution_channel <int>,\n#   is_repeated_guest <int>, previous_cancellations <int>,\n#   previous_bookings_not_canceled <int>, reserved_room_type <int>,\n#   assigned_room_type <int>, booking_changes <int>, deposit_type <int>,\n#   agent <int>, company <int>, days_in_waiting_list <int>,\n#   customer_type <int>, adr <int>, required_car_parking_spaces <int>, …\n```\n:::\n\n```{.r .cell-code}\n# Find the index of the row containing the missing value\nmissing_rows_index <- which(apply(data, 1, function(x) any(is.na(x))))\n\n# Print out lines with missing values\nmissing_rows <- data[missing_rows_index, ]\nprint(missing_rows)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 32\n  hotel   is_ca…¹ lead_…² arriv…³ arriv…⁴ arriv…⁵ arriv…⁶ stays…⁷ stays…⁸ adults\n  <chr>     <dbl>   <dbl>   <dbl> <chr>     <dbl>   <dbl>   <dbl>   <dbl>  <dbl>\n1 City H…       1       2    2015 August       32       3       1       0      2\n2 City H…       1       1    2015 August       32       5       0       2      2\n3 City H…       1       1    2015 August       32       5       0       2      3\n4 City H…       1       8    2015 August       33      13       2       5      2\n# … with 22 more variables: children <dbl>, babies <dbl>, meal <chr>,\n#   country <chr>, market_segment <chr>, distribution_channel <chr>,\n#   is_repeated_guest <dbl>, previous_cancellations <dbl>,\n#   previous_bookings_not_canceled <dbl>, reserved_room_type <chr>,\n#   assigned_room_type <chr>, booking_changes <dbl>, deposit_type <chr>,\n#   agent <chr>, company <chr>, days_in_waiting_list <dbl>,\n#   customer_type <chr>, adr <dbl>, required_car_parking_spaces <dbl>, …\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Using replace()\ndata$children <- replace(data$children, is.na(data$children), 0)\n\n# Using subset assignment\ndata$children[is.na(data$children)] <- 0\n\ndata %>%\n  summarize_all(function(x) sum(is.na(x)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 32\n  hotel is_canc…¹ lead_…² arriv…³ arriv…⁴ arriv…⁵ arriv…⁶ stays…⁷ stays…⁸ adults\n  <int>     <int>   <int>   <int>   <int>   <int>   <int>   <int>   <int>  <int>\n1     0         0       0       0       0       0       0       0       0      0\n# … with 22 more variables: children <int>, babies <int>, meal <int>,\n#   country <int>, market_segment <int>, distribution_channel <int>,\n#   is_repeated_guest <int>, previous_cancellations <int>,\n#   previous_bookings_not_canceled <int>, reserved_room_type <int>,\n#   assigned_room_type <int>, booking_changes <int>, deposit_type <int>,\n#   agent <int>, company <int>, days_in_waiting_list <int>,\n#   customer_type <int>, adr <int>, required_car_parking_spaces <int>, …\n```\n:::\n:::\n\n\nAs I began working with this dataset, I observed that it was already quite tidy. The dataset follows the principles of tidy data, where each variable forms a column, each observation forms a row, and each cell holds a single value of the corresponding variable for a given observation. To understand the extent of missing data across all columns, I performed an initial check using `summarize_all()` combined with `is.na()`. This gave me an overall snapshot of the missing data.\n\nNext, I employed `apply()` and `is.na()` to identify which rows in the dataset contained missing data, and stored these row indices in the variable `missing_rows_index` for future use. Using these stored indices, I was able to extract and store the rows with missing data in the `missing_rows` variable. By printing out `missing_rows`, I gained a detailed view of the rows with missing data and the extent of missingness.\n\nThen, I addressed the missing values in the \"children\" column, replacing them with 0 using the `replace()` function or subset assignment. I decided to replace missing values with 0 under the assumption that if the number of children isn't specified, it's likely because no children were involved in the booking. This approach to handling missing data seemed reasonable under this context.\n\nFinally, to confirm that the missing values in the \"children\" column were indeed replaced with 0, I repeated the missing data check using `summarize_all()`.\n\n## Identify variables that need to be mutated\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Combine year, month, and day of month into a single date column and then remove the original columns related to date\ndata <- data %>%\n  mutate(arrival_date = as.Date(paste(arrival_date_year, arrival_date_month, arrival_date_day_of_month, sep = \"-\"), format = \"%Y-%B-%d\")) %>%\n  select(-arrival_date_year, -arrival_date_month, -arrival_date_week_number, -arrival_date_day_of_month)\n\n# Convert the variables 'is_canceled' and 'is_repeated_guest' to logical (boolean) values, which are currently coded as integers\ndata <- data %>%\n  mutate(is_canceled = as.logical(is_canceled), is_repeated_guest = as.logical(is_repeated_guest))\n\n# Check and print unique values of categorical variables in order to see if there are inconsistencies, spelling mistakes, or unnecessary categories\nunique_values <- data %>%\n  select(hotel, meal, country, market_segment, distribution_channel, reserved_room_type, assigned_room_type, deposit_type, customer_type, reservation_status) %>%\n  sapply(unique)\nprint(unique_values)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$hotel\n[1] \"Resort Hotel\" \"City Hotel\"  \n\n$meal\n[1] \"BB\"        \"FB\"        \"HB\"        \"SC\"        \"Undefined\"\n\n$country\n  [1] \"PRT\"  \"GBR\"  \"USA\"  \"ESP\"  \"IRL\"  \"FRA\"  \"NULL\" \"ROU\"  \"NOR\"  \"OMN\" \n [11] \"ARG\"  \"POL\"  \"DEU\"  \"BEL\"  \"CHE\"  \"CN\"   \"GRC\"  \"ITA\"  \"NLD\"  \"DNK\" \n [21] \"RUS\"  \"SWE\"  \"AUS\"  \"EST\"  \"CZE\"  \"BRA\"  \"FIN\"  \"MOZ\"  \"BWA\"  \"LUX\" \n [31] \"SVN\"  \"ALB\"  \"IND\"  \"CHN\"  \"MEX\"  \"MAR\"  \"UKR\"  \"SMR\"  \"LVA\"  \"PRI\" \n [41] \"SRB\"  \"CHL\"  \"AUT\"  \"BLR\"  \"LTU\"  \"TUR\"  \"ZAF\"  \"AGO\"  \"ISR\"  \"CYM\" \n [51] \"ZMB\"  \"CPV\"  \"ZWE\"  \"DZA\"  \"KOR\"  \"CRI\"  \"HUN\"  \"ARE\"  \"TUN\"  \"JAM\" \n [61] \"HRV\"  \"HKG\"  \"IRN\"  \"GEO\"  \"AND\"  \"GIB\"  \"URY\"  \"JEY\"  \"CAF\"  \"CYP\" \n [71] \"COL\"  \"GGY\"  \"KWT\"  \"NGA\"  \"MDV\"  \"VEN\"  \"SVK\"  \"FJI\"  \"KAZ\"  \"PAK\" \n [81] \"IDN\"  \"LBN\"  \"PHL\"  \"SEN\"  \"SYC\"  \"AZE\"  \"BHR\"  \"NZL\"  \"THA\"  \"DOM\" \n [91] \"MKD\"  \"MYS\"  \"ARM\"  \"JPN\"  \"LKA\"  \"CUB\"  \"CMR\"  \"BIH\"  \"MUS\"  \"COM\" \n[101] \"SUR\"  \"UGA\"  \"BGR\"  \"CIV\"  \"JOR\"  \"SYR\"  \"SGP\"  \"BDI\"  \"SAU\"  \"VNM\" \n[111] \"PLW\"  \"QAT\"  \"EGY\"  \"PER\"  \"MLT\"  \"MWI\"  \"ECU\"  \"MDG\"  \"ISL\"  \"UZB\" \n[121] \"NPL\"  \"BHS\"  \"MAC\"  \"TGO\"  \"TWN\"  \"DJI\"  \"STP\"  \"KNA\"  \"ETH\"  \"IRQ\" \n[131] \"HND\"  \"RWA\"  \"KHM\"  \"MCO\"  \"BGD\"  \"IMN\"  \"TJK\"  \"NIC\"  \"BEN\"  \"VGB\" \n[141] \"TZA\"  \"GAB\"  \"GHA\"  \"TMP\"  \"GLP\"  \"KEN\"  \"LIE\"  \"GNB\"  \"MNE\"  \"UMI\" \n[151] \"MYT\"  \"FRO\"  \"MMR\"  \"PAN\"  \"BFA\"  \"LBY\"  \"MLI\"  \"NAM\"  \"BOL\"  \"PRY\" \n[161] \"BRB\"  \"ABW\"  \"AIA\"  \"SLV\"  \"DMA\"  \"PYF\"  \"GUY\"  \"LCA\"  \"ATA\"  \"GTM\" \n[171] \"ASM\"  \"MRT\"  \"NCL\"  \"KIR\"  \"SDN\"  \"ATF\"  \"SLE\"  \"LAO\" \n\n$market_segment\n[1] \"Direct\"        \"Corporate\"     \"Online TA\"     \"Offline TA/TO\"\n[5] \"Complementary\" \"Groups\"        \"Undefined\"     \"Aviation\"     \n\n$distribution_channel\n[1] \"Direct\"    \"Corporate\" \"TA/TO\"     \"Undefined\" \"GDS\"      \n\n$reserved_room_type\n [1] \"C\" \"A\" \"D\" \"E\" \"G\" \"F\" \"H\" \"L\" \"P\" \"B\"\n\n$assigned_room_type\n [1] \"C\" \"A\" \"D\" \"E\" \"G\" \"F\" \"I\" \"B\" \"H\" \"P\" \"L\" \"K\"\n\n$deposit_type\n[1] \"No Deposit\" \"Refundable\" \"Non Refund\"\n\n$customer_type\n[1] \"Transient\"       \"Contract\"        \"Transient-Party\" \"Group\"          \n\n$reservation_status\n[1] \"Check-Out\" \"Canceled\"  \"No-Show\"  \n```\n:::\n\n```{.r .cell-code}\n# Convert categorical variables into factors for easier analysis and visualization. \ndata <- data %>%\n  mutate_at(vars(hotel, meal, country, market_segment, distribution_channel, reserved_room_type, assigned_room_type, deposit_type, customer_type, reservation_status), \n            factor)\n\n# Print the first few rows of the dataset to verify that the transformations have been applied correctly\nhead(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 29\n  hotel      is_ca…¹ lead_…² stays…³ stays…⁴ adults child…⁵ babies meal  country\n  <fct>      <lgl>     <dbl>   <dbl>   <dbl>  <dbl>   <dbl>  <dbl> <fct> <fct>  \n1 Resort Ho… FALSE       342       0       0      2       0      0 BB    PRT    \n2 Resort Ho… FALSE       737       0       0      2       0      0 BB    PRT    \n3 Resort Ho… FALSE         7       0       1      1       0      0 BB    GBR    \n4 Resort Ho… FALSE        13       0       1      1       0      0 BB    GBR    \n5 Resort Ho… FALSE        14       0       2      2       0      0 BB    GBR    \n6 Resort Ho… FALSE        14       0       2      2       0      0 BB    GBR    \n# … with 19 more variables: market_segment <fct>, distribution_channel <fct>,\n#   is_repeated_guest <lgl>, previous_cancellations <dbl>,\n#   previous_bookings_not_canceled <dbl>, reserved_room_type <fct>,\n#   assigned_room_type <fct>, booking_changes <dbl>, deposit_type <fct>,\n#   agent <chr>, company <chr>, days_in_waiting_list <dbl>,\n#   customer_type <fct>, adr <dbl>, required_car_parking_spaces <dbl>,\n#   total_of_special_requests <dbl>, reservation_status <fct>, …\n```\n:::\n:::\n\n\nFirst, I merged the year, month, and day of arrival into a single date column and then removed the original columns. This was done using the mutate function to create a new arrival_date column, which was the combination of arrival_date_year, arrival_date_month, and arrival_date_day_of_month. After that, I used the `select`function to remove the original date columns. I also converted the 'is_canceled' and 'is_repeated_guest' columns into logical values using the `as.logical` function as these were originally in integer format.\n\nNext, I needed to check the unique values of categorical variables to identify any inconsistencies, spelling mistakes, or unnecessary categories. To do this, I selected certain categorical variables and applied the `sapply` and `unique` functions to get unique values for each column. After identifying and rectifying any issues, I converted these categorical variables into factors using the mutate_at function along with the factor function. This step was necessary because many functions in R treat factors differently from character strings, especially in statistical modeling and visualization. Finally, I used the `head`function to output the first few rows of the dataset, allowing me to verify that the transformations were correctly applied.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}