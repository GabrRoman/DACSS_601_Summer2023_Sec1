{
  "hash": "f35f0c4c17dc35676c3d9a773abcadda",
  "result": {
    "markdown": "---\ntitle: \"Challenge 3\"\nauthor: \"Prasann Desai\"\ndescription: \"Tidy Data: Pivoting\"\ndate: \"6/30/2023\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_3\n  - animal_weights\n  - Prasann Desai\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\n```\n:::\n\n\n## Challenge Overview\n\nToday's challenge is to:\n\n1.  read in a data set, and describe the data set using both words and any supporting information (e.g., tables, etc)\n2.  identify what needs to be done to tidy the current data\n3.  anticipate the shape of pivoted data\n4.  pivot the data into tidy format using `pivot_longer`\n\n## Read in data\n\nRead in one (or more) of the following datasets, using the correct R package and command.\n\n-   animal_weights.csv ‚≠ê\n-   eggs_tidy.csv ‚≠ê‚≠ê or organiceggpoultry.xls ‚≠ê‚≠ê‚≠ê\n-   australian_marriage\\*.xls ‚≠ê‚≠ê‚≠ê\n-   USA Households\\*.xlsx ‚≠ê‚≠ê‚≠ê‚≠ê\n-   sce_labor_chart_data_public.xlsx üåüüåüüåüüåüüåü\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Function call to read a csv file\nanimal_weights <- read_csv(\"_data/animal_weight.csv\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nanimal_weights\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 9 √ó 17\n  IPCC A‚Ä¶¬π Cattl‚Ä¶¬≤ Cattl‚Ä¶¬≥ Buffa‚Ä¶‚Å¥ Swine‚Ä¶‚Åµ Swine‚Ä¶‚Å∂ Chick‚Ä¶‚Å∑ Chick‚Ä¶‚Å∏ Ducks Turkeys\n  <chr>      <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl> <dbl>   <dbl>\n1 Indian ‚Ä¶     275     110     295      28      28     0.9     1.8   2.7     6.8\n2 Eastern‚Ä¶     550     391     380      50     180     0.9     1.8   2.7     6.8\n3 Africa       275     173     380      28      28     0.9     1.8   2.7     6.8\n4 Oceania      500     330     380      45     180     0.9     1.8   2.7     6.8\n5 Western‚Ä¶     600     420     380      50     198     0.9     1.8   2.7     6.8\n6 Latin A‚Ä¶     400     305     380      28      28     0.9     1.8   2.7     6.8\n7 Asia         350     391     380      50     180     0.9     1.8   2.7     6.8\n8 Middle ‚Ä¶     275     173     380      28      28     0.9     1.8   2.7     6.8\n9 Norther‚Ä¶     604     389     380      46     198     0.9     1.8   2.7     6.8\n# ‚Ä¶ with 7 more variables: Sheep <dbl>, Goats <dbl>, Horses <dbl>, Asses <dbl>,\n#   Mules <dbl>, Camels <dbl>, Llamas <dbl>, and abbreviated variable names\n#   ¬π‚Äã`IPCC Area`, ¬≤‚Äã`Cattle - dairy`, ¬≥‚Äã`Cattle - non-dairy`, ‚Å¥‚ÄãBuffaloes,\n#   ‚Åµ‚Äã`Swine - market`, ‚Å∂‚Äã`Swine - breeding`, ‚Å∑‚Äã`Chicken - Broilers`,\n#   ‚Å∏‚Äã`Chicken - Layers`\n```\n:::\n:::\n\n\n\n### Briefly describe the data\n\nDescribe the data, and be sure to comment on why you are planning to pivot it to make it \"tidy\"\n\nResponse:\n\nFrom the above output, we can see that there are 3 distinct features (even if we have 17 columns) in the dataset namely - IPCC Area (dimension), Animal-category (dimension) and Weight (measure). Judging by the dataset file name and the underlying data, we can make a fair guess that the dataset contains a numerical representation of weights of animals in different regions of the world. \n\nWe want to make it \"tidy\" because it is not preferable to have a separate weight column for each animal category. Also, in future, if we someone wishes to add a animal category to this dataset, it will require us to add another column. It is inconvenient to calculate aggregate measures of each of these columns without enlisting each of the column names which I think is not a scalable design of the dataset.\n\n\n## Anticipate the End Result\n\nThe first step in pivoting the data is to try to come up with a concrete vision of what the end product *should* look like - that way you will know whether or not your pivoting was successful.\n\nOne easy way to do this is to think about the dimensions of your current data (tibble, dataframe, or matrix), and then calculate what the dimensions of the pivoted data should be.\n\nSuppose you have a dataset with $n$ rows and $k$ variables. In our example, 3 of the variables are used to identify a case, so you will be pivoting $k-3$ variables into a longer format where the $k-3$ variable names will move into the `names_to` variable and the current values in each of those columns will move into the `values_to` variable. Therefore, we would expect $n * (k-3)$ rows in the pivoted dataframe!\n\n### Example: find current and future data dimensions\n\nLets see if this works with a simple example.\n\n\n::: {.cell tbl-cap='Example'}\n\n```{.r .cell-code}\ndf<-tibble(country = rep(c(\"Mexico\", \"USA\", \"France\"),2),\n           year = rep(c(1980,1990), 3), \n           trade = rep(c(\"NAFTA\", \"NAFTA\", \"EU\"),2),\n           outgoing = rnorm(6, mean=1000, sd=500),\n           incoming = rlogis(6, location=1000, \n                             scale = 400))\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 √ó 5\n  country  year trade outgoing incoming\n  <chr>   <dbl> <chr>    <dbl>    <dbl>\n1 Mexico   1980 NAFTA     846.    1270.\n2 USA      1990 NAFTA     646.     751.\n3 France   1980 EU        911.     848.\n4 Mexico   1990 NAFTA    1276.    1484.\n5 USA      1980 NAFTA    1004.    1268.\n6 France   1990 EU        723.    1051.\n```\n:::\n\n```{.r .cell-code}\n#existing rows/cases\nnrow(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6\n```\n:::\n\n```{.r .cell-code}\n#existing columns/cases\nncol(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n\n```{.r .cell-code}\n#expected rows/cases\nnrow(df) * (ncol(df)-3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 12\n```\n:::\n\n```{.r .cell-code}\n# expected columns \n3 + 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n:::\n\n\nOr simple example has $n = 6$ rows and $k - 3 = 2$ variables being pivoted, so we expect a new dataframe to have $n * 2 = 12$ rows x $3 + 2 = 5$ columns.\n\n### Challenge: Describe the final dimensions\n\nDocument your work here.\n\nResponse: In the pivoted data, I expect that for each IPCC area, we will have 16 rows. Therefore, the final dimensions of the pivoted data would be 144 rows and 3 columns (IPCC area, animal_category, weight)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#existing rows/cases\nnrow(animal_weights)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 9\n```\n:::\n\n```{.r .cell-code}\n#existing columns/cases\nncol(animal_weights)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 17\n```\n:::\n\n```{.r .cell-code}\n#expected rows/cases\nnrow(animal_weights) * (ncol(df)-1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 36\n```\n:::\n\n```{.r .cell-code}\n# expected columns \n1 + 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n:::\n\n\nAny additional comments?\n\n## Pivot the Data\n\nNow we will pivot the data, and compare our pivoted data dimensions to the dimensions calculated above as a \"sanity\" check.\n\n### Example\n\n\n::: {.cell tbl-cap='Pivoted Example'}\n\n```{.r .cell-code}\ndf<-pivot_longer(df, col = c(outgoing, incoming),\n                 names_to=\"trade_direction\",\n                 values_to = \"trade_value\")\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 12 √ó 5\n   country  year trade trade_direction trade_value\n   <chr>   <dbl> <chr> <chr>                 <dbl>\n 1 Mexico   1980 NAFTA outgoing               846.\n 2 Mexico   1980 NAFTA incoming              1270.\n 3 USA      1990 NAFTA outgoing               646.\n 4 USA      1990 NAFTA incoming               751.\n 5 France   1980 EU    outgoing               911.\n 6 France   1980 EU    incoming               848.\n 7 Mexico   1990 NAFTA outgoing              1276.\n 8 Mexico   1990 NAFTA incoming              1484.\n 9 USA      1980 NAFTA outgoing              1004.\n10 USA      1980 NAFTA incoming              1268.\n11 France   1990 EU    outgoing               723.\n12 France   1990 EU    incoming              1051.\n```\n:::\n:::\n\n\nYes, once it is pivoted long, our resulting data are $12x5$ - exactly what we expected!\n\n### Challenge: Pivot the Chosen Data\n\nDocument your work here. What will a new \"case\" be once you have pivoted the data? How does it meet requirements for tidy data?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Using the pivot_longer function to pivot the dataset\nanimal_weights_pivoted <- pivot_longer(animal_weights, col = !'IPCC Area', names_to = \"animal_category\", values_to = \"weight\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Viewing the pivoted dataset\nanimal_weights_pivoted\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 144 √ó 3\n   `IPCC Area`         animal_category    weight\n   <chr>               <chr>               <dbl>\n 1 Indian Subcontinent Cattle - dairy      275  \n 2 Indian Subcontinent Cattle - non-dairy  110  \n 3 Indian Subcontinent Buffaloes           295  \n 4 Indian Subcontinent Swine - market       28  \n 5 Indian Subcontinent Swine - breeding     28  \n 6 Indian Subcontinent Chicken - Broilers    0.9\n 7 Indian Subcontinent Chicken - Layers      1.8\n 8 Indian Subcontinent Ducks                 2.7\n 9 Indian Subcontinent Turkeys               6.8\n10 Indian Subcontinent Sheep                28  \n# ‚Ä¶ with 134 more rows\n```\n:::\n:::\n\nEach case in the pivoted dataset is a unique combination of IPCC Area and animal_category. It's a tidy dataframe because there's no duplicate data in the pivoted data and also there no loss or no new information.\n\nAny additional comments?\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}