{
  "hash": "c31efcab46302dafaa13a2dfc0bd2f78",
  "result": {
    "markdown": "---\ntitle: \"Challenge 6\"\nauthor: \"Prasann Desai\"\ndescription: \"Visualizing Time and Relationships\"\ndate: \"7/1/2023\"\nformat:\n  html:\n    toc: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_6\n  - Prasann Desai\n  - debt\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(ggplot2)\nlibrary(readxl)\nlibrary(lubridate)\nlibrary(scales)\n\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\n```\n:::\n\n\n## Challenge Overview\n\nToday's challenge is to:\n\n1)  read in a data set, and describe the data set using both words and any supporting information (e.g., tables, etc)\n2)  tidy data (as needed, including sanity checks)\n3)  mutate variables as needed (including sanity checks)\n4)  create at least one graph including time (evolution)\n   - try to make them \"publication\" ready (optional)\n   - Explain why you choose the specific graph type\n5)  Create at least one graph depicting part-whole or flow relationships\n   - try to make them \"publication\" ready (optional)\n   - Explain why you choose the specific graph type\n\n[R Graph Gallery](https://r-graph-gallery.com/) is a good starting point for thinking about what information is conveyed in standard graph types, and includes example R code.\n\n(be sure to only include the category tags for the data you use!)\n\n## Read in data\n\nRead in one (or more) of the following datasets, using the correct R package and command.\n\n  - debt  ⭐\n  - fed_rate ⭐⭐\n  - abc_poll ⭐⭐⭐\n  - usa_hh ⭐⭐⭐\n  - hotel_bookings ⭐⭐⭐⭐\n  - AB_NYC ⭐⭐⭐⭐⭐\n\n  \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Function call to read a csv file\ndebt_df <- read_excel('_data/debt_in_trillions.xlsx')\ndebt_df\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 74 × 8\n   `Year and Quarter` Mortgage HE Revolvin…¹ Auto …² Credi…³ Stude…⁴ Other Total\n   <chr>                 <dbl>         <dbl>   <dbl>   <dbl>   <dbl> <dbl> <dbl>\n 1 03:Q1                  4.94         0.242   0.641   0.688   0.241 0.478  7.23\n 2 03:Q2                  5.08         0.26    0.622   0.693   0.243 0.486  7.38\n 3 03:Q3                  5.18         0.269   0.684   0.693   0.249 0.477  7.56\n 4 03:Q4                  5.66         0.302   0.704   0.698   0.253 0.449  8.07\n 5 04:Q1                  5.84         0.328   0.72    0.695   0.260 0.446  8.29\n 6 04:Q2                  5.97         0.367   0.743   0.697   0.263 0.423  8.46\n 7 04:Q3                  6.21         0.426   0.751   0.706   0.33  0.41   8.83\n 8 04:Q4                  6.36         0.468   0.728   0.717   0.346 0.423  9.04\n 9 05:Q1                  6.51         0.502   0.725   0.71    0.364 0.394  9.21\n10 05:Q2                  6.70         0.528   0.774   0.717   0.374 0.402  9.49\n# … with 64 more rows, and abbreviated variable names ¹​`HE Revolving`,\n#   ²​`Auto Loan`, ³​`Credit Card`, ⁴​`Student Loan`\n```\n:::\n:::\n\n\n### Briefly describe the data\n\nResponse:\n\nFrom the above output, we can see that the dataset contains different categories of debt at a granularity of year-quarter. It also contains a 'Total' column that contains the total of all debt categories in each row.\n\n\n## Tidy Data (as needed)\n\nIs your data already tidy, or is there work to be done? Be sure to anticipate your end result to provide a sanity check, and document your work here.\n\nResponse: The data is not already tidy since all categories of debt have a separate column - and we need to have the debt values in a single column and each category-name is another column. We will be using the pivot_longer function to make it tidy.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Remove the 'Total column'\ndebt <- select(debt_df, !Total)\n\n# Using the pivot_longer function to pivot the dataset\ndebt_pivoted <- pivot_longer(debt, col = !'Year and Quarter', names_to = \"debt_category\", values_to = \"debt_in_trillions\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Sanity check: It is expected the total number of rows in the resulting dataset would be 74 * 6 = 444\ndebt_pivoted\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 444 × 3\n   `Year and Quarter` debt_category debt_in_trillions\n   <chr>              <chr>                     <dbl>\n 1 03:Q1              Mortgage                  4.94 \n 2 03:Q1              HE Revolving              0.242\n 3 03:Q1              Auto Loan                 0.641\n 4 03:Q1              Credit Card               0.688\n 5 03:Q1              Student Loan              0.241\n 6 03:Q1              Other                     0.478\n 7 03:Q2              Mortgage                  5.08 \n 8 03:Q2              HE Revolving              0.26 \n 9 03:Q2              Auto Loan                 0.622\n10 03:Q2              Credit Card               0.693\n# … with 434 more rows\n```\n:::\n:::\n\n\n\nAre there any variables that require mutation to be usable in your analysis stream? For example, do you need to calculate new values in order to graph them? Can string values be represented numerically? Do you need to turn any variables into factors and reorder for ease of graphics and visualization?\n\nDocument your work here.\n\nResponse: I would split the 'Year and Quarter' column into separate columns and improve the readability - convert the string -> '03' to number -> 2003\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Extracting year and quarter from the 'Year and Quarter' column and creating separate columns for them\n# Converting the 'Year' column to integer\ndebt_pivoted <- mutate(debt_pivoted, \n                       Quarter = str_split(`Year and Quarter`, \":\", simplify = TRUE)[,2], \n                       Year = as.integer(str_split(`Year and Quarter`, \":\", simplify = TRUE)[,1]) + 2000)\ndebt_pivoted\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 444 × 5\n   `Year and Quarter` debt_category debt_in_trillions Quarter  Year\n   <chr>              <chr>                     <dbl> <chr>   <dbl>\n 1 03:Q1              Mortgage                  4.94  Q1       2003\n 2 03:Q1              HE Revolving              0.242 Q1       2003\n 3 03:Q1              Auto Loan                 0.641 Q1       2003\n 4 03:Q1              Credit Card               0.688 Q1       2003\n 5 03:Q1              Student Loan              0.241 Q1       2003\n 6 03:Q1              Other                     0.478 Q1       2003\n 7 03:Q2              Mortgage                  5.08  Q2       2003\n 8 03:Q2              HE Revolving              0.26  Q2       2003\n 9 03:Q2              Auto Loan                 0.622 Q2       2003\n10 03:Q2              Credit Card               0.693 Q2       2003\n# … with 434 more rows\n```\n:::\n:::\n\n\n## Time Dependent Visualization\n\n::: {.cell}\n\n```{.r .cell-code}\ndebt_year <- group_by(debt_pivoted, Year, Quarter)\ndebt_yoy <- summarise(debt_year, debt_sum = sum(debt_in_trillions, na.rm = TRUE))\ndebt_yoy$year_q <- yq(paste0(debt_yoy$Year, \":\", debt_yoy$Quarter))\ndebt_yoy\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 74 × 4\n# Groups:   Year [19]\n    Year Quarter debt_sum year_q    \n   <dbl> <chr>      <dbl> <date>    \n 1  2003 Q1          7.23 2003-01-01\n 2  2003 Q2          7.38 2003-04-01\n 3  2003 Q3          7.56 2003-07-01\n 4  2003 Q4          8.07 2003-10-01\n 5  2004 Q1          8.29 2004-01-01\n 6  2004 Q2          8.46 2004-04-01\n 7  2004 Q3          8.83 2004-07-01\n 8  2004 Q4          9.04 2004-10-01\n 9  2005 Q1          9.21 2005-01-01\n10  2005 Q2          9.49 2005-04-01\n# … with 64 more rows\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Line plot of trend of Debt over years each quarter (It's very intuitive to visualize this trend in a line chart)\nggplot(debt_yoy, aes(x = year_q, y = debt_sum)) +\n  geom_line(color = \"orange\", \n            size=1) +\n  scale_x_date(date_breaks = '3 years',\n               labels = date_format(\"%b-%y\")) +\n  labs(title = \"Total Debt (Y-o-Y)\",\n       subtitle = \"Q1 2003 - Q2 2021\",\n       x = \"Year-Quarter\",\n       y = \"Debt (in trillions)\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](challenge_6_Prasann_Desai_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n\n## Visualizing Part-Whole Relationships\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Line plot of trend of Debt over years each quarter (split by category, It's very intuitive to visualize this trend in a multi-line chart)\ndebt_pivoted$year_q <- yq(paste0(debt_pivoted$Year, \":\", debt_pivoted$Quarter))\n\nggplot(debt_pivoted, aes(x = year_q, y = debt_in_trillions, color = debt_category)) +\n  geom_point(size=0.5) +\n  geom_line(size=0.5) +\n  scale_x_date(date_breaks = '3 years',\n               labels = date_format(\"%b-%y\")) +\n  labs(title = \"Total Debt (Y-o-Y)\",\n       subtitle = \"Q1 2003 - Q2 2021\",\n       x = \"Year-Quarter\",\n       y = \"Debt (in trillions)\") +\n  theme_minimal() +\n  scale_color_brewer(palette = \"Dark2\")\n```\n\n::: {.cell-output-display}\n![](challenge_6_Prasann_Desai_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "challenge_6_Prasann_Desai_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}