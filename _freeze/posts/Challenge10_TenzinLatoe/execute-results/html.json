{
  "hash": "87a2b2aea928ef16a40bc006805020dd",
  "result": {
    "markdown": "---\ntitle: \"Challenge 10\"\nauthor: \"Tenzin Latoe\"\ndescription: \"purrr\"\ndate: \"7/20/2023\"\nformat:\n  html:\n    df-print: paged\ncategories:\n  - challenge_10\n---\n\n\n\n\n## Challenge Overview\n\nThe [purrr](https://purrr.tidyverse.org package is a powerful tool for functional programming. It allows the user to apply a single function across multiple objects. It can replace for loops with a more readable (and often faster) simple function call. \n\nFor example, we can draw `n` random samples from 10 different distributions using a vector of 10 means.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 100 # sample size\nm <- seq(1,10) # means \nsamps <- map(m,rnorm,n=n) \n```\n:::\n\n\nWe can then use `map_dbl` to verify that this worked correctly by computing the mean for each sample.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nsamps %>%\n  map_dbl(mean)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 0.7930265 1.9886684 2.9215061 4.1315976 5.1183208 6.0243612 7.1483536\n [8] 7.9461430 8.9145070 9.8369880\n```\n:::\n:::\n\n\n`purrr` is tricky to learn (but beyond useful once you get a handle on it). Therefore, it's imperative that you complete the `purr` and `map` readings before attempting this challenge.  \n\n## The challenge  \n\nUse `purrr` with a function to perform *some* data science task. What this task is is up to you. It could involve computing summary statistics, reading in multiple datasets, running a random process multiple times, or anything else you might need to do in your work as a data analyst. You might consider using `purrr` with a function you wrote for challenge 9.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nrailroad <- read_csv(\"_data/railroad_2012_clean_county.csv\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmap_chr(railroad, class)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          state          county total_employees \n    \"character\"     \"character\"       \"numeric\" \n```\n:::\n:::\n\nThe class for the railroad data set are: character, character, and numeric vectors. \n\n::: {.cell}\n\n```{.r .cell-code}\nrailroad_character <- railroad %>% \n  map_df(as.character)\nglimpse(railroad_character)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 2,930\nColumns: 3\n$ state           <chr> \"AE\", \"AK\", \"AK\", \"AK\", \"AK\", \"AK\", \"AK\", \"AL\", \"AL\", …\n$ county          <chr> \"APO\", \"ANCHORAGE\", \"FAIRBANKS NORTH STAR\", \"JUNEAU\", …\n$ total_employees <chr> \"2\", \"7\", \"2\", \"3\", \"2\", \"1\", \"88\", \"102\", \"143\", \"1\",…\n```\n:::\n:::\n\nI'll use map to now list all columns as characters. ",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}