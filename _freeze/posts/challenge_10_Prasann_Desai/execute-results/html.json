{
  "hash": "5ce4131928172698a422d8672daf487a",
  "result": {
    "markdown": "---\ntitle: \"Challenge 10\"\nauthor: \"Prasann Desai\"\ndescription: \"purrr\"\ndate: \"7/3/2023\"\nformat:\n  html:\n    toc: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_10\n  - Prasann Desai\n---\n\n\n\n\n## Challenge Overview\n\nThe [purrr](https://purrr.tidyverse.org/) package is a powerful tool for functional programming. It allows the user to apply a single function across multiple objects. It can replace for loops with a more readable (and often faster) simple function call. \n\nFor example, we can draw `n` random samples from 10 different distributions using a vector of 10 means.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 100 # sample size\nm <- seq(1,10) # means \nsamps <- map(m,rnorm,n=n) \n```\n:::\n\n\nWe can then use `map_dbl` to verify that this worked correctly by computing the mean for each sample.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nsamps %>%\n  map_dbl(mean)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  0.9492413  2.2953791  2.8792359  4.0798361  5.0445141  5.8061162\n [7]  6.9988846  7.9222024  8.9798486 10.0718168\n```\n:::\n:::\n\n\n`purrr` is tricky to learn (but beyond useful once you get a handle on it). Therefore, it's imperative that you complete the `purr` and `map` readings before attempting this challenge.  \n\n## The challenge  \n\nUse `purrr` with a function to perform *some* data science task. What this task is is up to you. It could involve computing summary statistics, reading in multiple datasets, running a random process multiple times, or anything else you might need to do in your work as a data analyst. You might consider using `purrr` with a function you wrote for challenge 9.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Function call to read a csv files and mutating any dataset as required\ncereal_df <- read_csv(\"_data/cereal.csv\")\nabc_poll_2021 <- read_csv(\"_data/abc_poll_2021.csv\")\nabc_poll_2021 <- mutate(abc_poll_2021, is_hispanic = !str_detect(ppethm, \"Non-Hispanic\"), pprace = str_split(ppethm, \",\", simplify = TRUE)[,1])\nabc_poll_2021 <- mutate(abc_poll_2021, `Interview Consent` = case_when(str_detect(Contact, \"Yes\") ~ \"Yes\",\n                                                                     str_detect(Contact, \"No\") ~ \"No\"\n                                                                     ))\nabc_poll_2021 <- rename(abc_poll_2021, Race = pprace)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Function definition for plotting pie chart\nplot_pie_chart <- function(input_df, category_var, chart_title) {\n\n  # Mutating the dataset\n  split_by_type <- count(input_df, across(all_of(category_var))) %>% arrange(-n) %>% mutate(prop = round(-n*100/sum(n),1), lab.ypos = cumsum(prop) - 0.5*prop)\n  split_by_type$label <- paste0(round(-split_by_type$prop), \"%\")\n  \n  textsize = (10/nrow(split_by_type)) + 1\n\n  # Creating a pie chart\n  ggplot(split_by_type, \n       aes(x = 1,\n           y = prop,\n           fill = .data[[category_var]])) + \n  geom_bar(width = 1,\n           stat = \"identity\", \n           color = \"black\") +\n  geom_text(\n    aes(label=label), position = position_stack(vjust=0.5),\n            color = \"black\",\n            size = textsize) +\n  coord_polar(\"y\",\n              start = 0\n              ) +\n  theme_void() +\n  labs(title = chart_title)  \n  \n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Creating individual lists of all input parameters\ndf_list <- list(cereal_df, abc_poll_2021, abc_poll_2021)\ncategory_var_list <- list(\"Type\", \"Interview Consent\", \"Race\")\nchart_titles <- list(\"Cereals by Type\", \"Poll Respondents' consent to be interviewed\", \"Poll Respondents by Race\")\n\n# Combining all the above parameters lists into a single named list\nt <- list(input_df = df_list, category_var = category_var_list, chart_title = chart_titles)  \n\n# Calling the map function\npmap(t, plot_pie_chart, .progress = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n```\n:::\n\n::: {.cell-output-display}\n![](challenge_10_Prasann_Desai_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n\n[[2]]\n```\n:::\n\n::: {.cell-output-display}\n![](challenge_10_Prasann_Desai_files/figure-html/unnamed-chunk-6-2.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n\n[[3]]\n```\n:::\n\n::: {.cell-output-display}\n![](challenge_10_Prasann_Desai_files/figure-html/unnamed-chunk-6-3.png){width=672}\n:::\n:::\n",
    "supporting": [
      "challenge_10_Prasann_Desai_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}