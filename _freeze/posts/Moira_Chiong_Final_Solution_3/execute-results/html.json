{
  "hash": "142fc91b47fee388e4237daa80defc9c",
  "result": {
    "markdown": "---\ntitle: \"Challenge 3 Solutions\"\nauthor: \"Moira Chiong\"\ndescription: \"Tidy Data: Pivoting\"\ndate: \"6/10/2023\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_3\n  - animal_weights\n  - eggs\n  - australian_marriage\n  - usa_households\n  - sce_labor\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError: package or namespace load failed for 'tidyverse' in loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]]):\n namespace 'magrittr' 2.0.2 is being loaded, but >= 2.0.3 is required\n```\n:::\n\n```{.r .cell-code}\nlibrary(tidyr)\nlibrary(dplyr)\n```\n:::\n\n\n## Challenge Overview\n\nToday's challenge is to:\n\n1.  read in a data set, and describe the data set using both words and any supporting information (e.g., tables, etc)\n2.  identify what needs to be done to tidy the current data\n3.  anticipate the shape of pivoted data\n4.  pivot the data into tidy format using `pivot_longer`\n\n\nRead in one (or more) of the following datasets, using the correct R package and command.\n\n-   animal_weights.csv ‚≠ê\n-   eggs_tidy.csv ‚≠ê‚≠ê or organiceggpoultry.xls ‚≠ê‚≠ê‚≠ê\n-   australian_marriage\\*.xls ‚≠ê‚≠ê‚≠ê\n-   USA Households\\*.xlsx ‚≠ê‚≠ê‚≠ê‚≠ê\n-   sce_labor_chart_data_public.xlsx üåüüåüüåüüåüüåü\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Read in data\nlibrary(readr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'readr' was built under R version 4.1.3\n```\n:::\n\n```{.r .cell-code}\nanimal_weight <- read_csv(\"_data/animal_weight.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 9 Columns: 17\n-- Column specification --------------------------------------------------------\nDelimiter: \",\"\nchr  (1): IPCC Area\ndbl (16): Cattle - dairy, Cattle - non-dairy, Buffaloes, Swine - market, Swi...\n\ni Use `spec()` to retrieve the full column specification for this data.\ni Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\nView(animal_weight)\nncol(animal_weight)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 17\n```\n:::\n\n```{.r .cell-code}\nnrow(animal_weight)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 9\n```\n:::\n:::\n\n\n\n```\n\n\n\n\n```\n\n### Briefly describe the data\n\nDescribe the data, and be sure to comment on why you are planning to pivot it to make it \"tidy\"\n\nThis data set is wide, with 17 columns of animals, and 9 rows of observations or geographic areas. \n\nI am planning on pivoting the data because it is so wide with 17 columnns of animals. I am planning on pivoting the data because it will conserve space and the data will be much neater. We will not have to struggle to read in the data once it is pivoted.\n\n## Anticipate the End Result\n\nThe first step in pivoting the data is to try to come up with a concrete vision of what the end product *should* look like - that way you will know whether or not your pivoting was successful.\n\nOne easy way to do this is to think about the dimensions of your current data (tibble, dataframe, or matrix), and then calculate what the dimensions of the pivoted data should be.\n\nSuppose you have a dataset with $n$ rows and $k$ variables. In our example, 3 of the variables are used to identify a case, so you will be pivoting $k-3$ variables into a longer format where the $k-3$ variable names will move into the `names_to` variable and the current values in each of those columns will move into the `values_to` variable. Therefore, we would expect $n * (k-3)$ rows in the pivoted dataframe!\n\n### Example: find current and future data dimensions\n\nLets see if this works with a simple example.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyr)\nanimals_tidy <-pivot_longer(animal_weight, col = -`IPCC Area`, names_to = \"Livestock\", values_to = \"Weight\")\n```\n:::\n\n\nOr simple example has $n = 6$ rows and $k - 3 = 2$ variables being pivoted, so we expect a new dataframe to have $n * 2 = 12$ rows x $3 + 2 = 5$ columns.\n\n### Challenge: Describe the final dimensions\n\nDocument your work here.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nncol(animals_tidy)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n\n```{.r .cell-code}\nnrow(animals_tidy)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 144\n```\n:::\n:::\n\n\nAny additional comments?\n\n## Pivot the Data\n\nNow we will pivot the data, and compare our pivoted data dimensions to the dimensions calculated above as a \"sanity\" check.\n\n### Example\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf<-pivot_longer(df, col = c(outgoing, incoming),\n                 names_to=\"trade_direction\",\n                 values_to = \"trade_value\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in UseMethod(\"pivot_longer\"): no applicable method for 'pivot_longer' applied to an object of class \"function\"\n```\n:::\n\n```{.r .cell-code}\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nfunction (x, df1, df2, ncp, log = FALSE) \n{\n    if (missing(ncp)) \n        .Call(C_df, x, df1, df2, log)\n    else .Call(C_dnf, x, df1, df2, ncp, log)\n}\n<bytecode: 0x000000001eeeb2c8>\n<environment: namespace:stats>\n```\n:::\n:::\n\n\nYes, once it is pivoted long, our resulting data are $12x5$ - exactly what we expected!\n\n### Challenge: Pivot the Chosen Data\n\nDocument your work here. What will a new \"case\" be once you have pivoted the data? How does it meet requirements for tidy data?\n\nThere are three rules which make a data set tidy:\n\nThere are three interrelated rules which make a dataset tidy:\n\nEach variable must have its own column.\nEach observation must have its own row.\nEach value must have its own cell.\n\nhttps://r4ds.had.co.nz/tidy-data.html\n\nThis pivoted data set is tidy because each variable has its own column, each observation has its own row and each value has a cell.``\n\nAny additional comments?\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}