{
  "hash": "4e952dcc4a7d2136f271c22e99273212",
  "result": {
    "markdown": "---\ntitle: \"Challenge 10\"\nauthor: \"Audrey Bertin\"\ndescription: \"purrr\"\ndate: \"7/1/2023\"\nformat:\n  html:\n    df-print: paged\n    toc: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_10\n  - functions\n  - purrr\n  - audrey_bertin\n---\n\n\n\n\nFor this challenge, I'll be using the function I wrote in challenge 9 that calculates z scores and apply it multiple times.\n\nA common use of z-scores is in anomaly detection. In this practice, we compare the most recent value in a sequence to all the values that came before to see if that value is an anomaly or not. \n\nWe can use a built in dataset for this, called `airquality`, which stores time series air quality information:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(airquality)\nhead(airquality)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"\"],\"name\":[\"_rn_\"],\"type\":[\"\"],\"align\":[\"left\"]},{\"label\":[\"Ozone\"],\"name\":[1],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"Solar.R\"],\"name\":[2],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"Wind\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Temp\"],\"name\":[4],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"Month\"],\"name\":[5],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"Day\"],\"name\":[6],\"type\":[\"int\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"41\",\"2\":\"190\",\"3\":\"7.4\",\"4\":\"67\",\"5\":\"5\",\"6\":\"1\",\"_rn_\":\"1\"},{\"1\":\"36\",\"2\":\"118\",\"3\":\"8.0\",\"4\":\"72\",\"5\":\"5\",\"6\":\"2\",\"_rn_\":\"2\"},{\"1\":\"12\",\"2\":\"149\",\"3\":\"12.6\",\"4\":\"74\",\"5\":\"5\",\"6\":\"3\",\"_rn_\":\"3\"},{\"1\":\"18\",\"2\":\"313\",\"3\":\"11.5\",\"4\":\"62\",\"5\":\"5\",\"6\":\"4\",\"_rn_\":\"4\"},{\"1\":\"NA\",\"2\":\"NA\",\"3\":\"14.3\",\"4\":\"56\",\"5\":\"5\",\"6\":\"5\",\"_rn_\":\"5\"},{\"1\":\"28\",\"2\":\"NA\",\"3\":\"14.9\",\"4\":\"66\",\"5\":\"5\",\"6\":\"6\",\"_rn_\":\"6\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\nOur original function looks as follows:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nz_score <- function(baseline, value){\n  mean <- mean(baseline)\n  sd <- sd(baseline)\n  z_score <- abs((value - mean)/sd)\n  \n  results = tibble(mean = mean, sd = sd, input_value = value, z_score = z_score)\n  return(results)\n}\n```\n:::\n\n\nWe can rewrite this so that it determines the baseline and value itself, and instead takes a vector as input:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nz_score <- function(vec){\n  baseline = vec %>% head(-1)\n  value = vec %>% tail(1)\n  \n  mean <- mean(baseline, na.rm=TRUE)\n  sd <- sd(baseline, na.rm=TRUE)\n  z_score <- abs((value - mean)/sd)\n  \n  results = tibble(baseline_mean = mean, baseline_sd = sd, most_recent_value = value, z_score = z_score)\n  return(results)\n}\n```\n:::\n\n\nRunning this on a single column we get:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nz_score(airquality$Temp)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"baseline_mean\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"baseline_sd\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"most_recent_value\"],\"name\":[3],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"z_score\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"77.94737\",\"2\":\"9.462221\",\"3\":\"68\",\"4\":\"1.051272\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\nWe can use `purrr::map` to compute this for multiple columns and join them into a single dataframe:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncols = list(airquality$Ozone, airquality$Wind, airquality$Temp)\n\nmap_dfr(cols, z_score)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"baseline_mean\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"baseline_sd\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"most_recent_value\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"z_score\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"42.321739\",\"2\":\"33.066798\",\"3\":\"20.0\",\"4\":\"0.6750499\"},{\"1\":\"9.947368\",\"2\":\"3.532403\",\"3\":\"11.5\",\"4\":\"0.4395397\"},{\"1\":\"77.947368\",\"2\":\"9.462221\",\"3\":\"68.0\",\"4\":\"1.0512720\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}