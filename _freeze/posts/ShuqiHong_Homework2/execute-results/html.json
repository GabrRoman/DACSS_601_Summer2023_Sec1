{
  "hash": "77bdc7aea8672ce706b1f0355c0c8d4d",
  "result": {
    "markdown": "---\ntitle: \"Homework 2\"\nauthor: \"Shuqi Hong\"\ndescription: \"Reading in final project data - avocado.csv\"\ndate: \"6/09/2023\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\n\n---\n\n\n# Introduction\n\nThe table below represents weekly 2015 - 2018 retail scan data for National retail volume (units) and price. Retail scan data comes directly from retailers’ cash registers based on actual retail sales of Hass avocados. \n\nSome relevant columns in the dataset:\n\nDate - The date of the observation\nAveragePrice - the average price of a single avocado\ntype - conventional or organic\nyear - the year\nRegion - the city or region of the observation\nTotal Volume - Total number of avocados sold\n4046 - Total number of avocados with PLU 4046 sold\n4225 - Total number of avocados with PLU 4225 sold\n4770 - Total number of avocados with PLU 4770 sold\n\nI read in file first and delete the first column because it represents row number.\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(dplyr)\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\n\navocado <- read_csv(\"_data/avocado.csv\")\n\navocado <- avocado %>% select(-1)\n\navocado\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 18,249 × 13\n   Date       AveragePrice `Total Volume` `4046`  `4225` `4770` `Total Bags`\n   <date>            <dbl>          <dbl>  <dbl>   <dbl>  <dbl>        <dbl>\n 1 2015-12-27         1.33         64237.  1037.  54455.   48.2        8697.\n 2 2015-12-20         1.35         54877.   674.  44639.   58.3        9506.\n 3 2015-12-13         0.93        118220.   795. 109150.  130.         8145.\n 4 2015-12-06         1.08         78992.  1132   71976.   72.6        5811.\n 5 2015-11-29         1.28         51040.   941.  43838.   75.8        6184.\n 6 2015-11-22         1.26         55980.  1184.  48068.   43.6        6684.\n 7 2015-11-15         0.99         83454.  1369.  73673.   93.3        8319.\n 8 2015-11-08         0.98        109428.   704. 101815.   80          6829.\n 9 2015-11-01         1.02         99811.  1022.  87316.   85.3       11388.\n10 2015-10-25         1.07         74339.   842.  64757.  113          8626.\n# ℹ 18,239 more rows\n# ℹ 6 more variables: `Small Bags` <dbl>, `Large Bags` <dbl>,\n#   `XLarge Bags` <dbl>, type <chr>, year <dbl>, region <chr>\n```\n:::\n:::\n\n\nI separate \"Date\" into year, month and day column which shows clearer. Then I sorted them chronologically and mutate the variables. the column of 4046, 4225, 4770 are the size of Hass avocado, respectively small, large, extra large. So I also renamed them. I think I won't analyze this data in each week, so I also delete it.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclean_avocado <- avocado %>% select(-`year`) %>% \n  separate(Date, into= c(\"year\",\"month\",\"day\"), sep=\"-\") %>% arrange(year, month, day) %>%\n  fill(year,month) %>% \n  mutate( month = case_when(\n  month == \"01\" ~ \"January\", \n  month == \"02\" ~ \"Feburary\",\n  month == \"03\" ~ \"March\",\n  month == \"04\" ~ \"April\",\n  month == \"05\" ~ \"May\",\n  month == \"06\" ~ \"June\",\n  month == \"07\" ~ \"July\",\n  month == \"08\" ~ \"August\",\n  month == \"09\" ~ \"September\",\n  month == \"10\" ~ \"October\",\n  month == \"11\" ~ \"November\",\n  month == \"12\" ~ \"December\"\n)) %>%\n  mutate(\n    month = as_factor(month),\n    day = as_factor(day),\n    type = as_factor(type)\n  ) %>% \n  rename(c( small = `4046`, `large` = `4225`, `Extra_large` = `4770`)) %>% select(-`day`)\n                  \nclean_avocado   \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 18,249 × 13\n   year  month   AveragePrice `Total Volume`    small    large Extra_large\n   <chr> <fct>          <dbl>          <dbl>    <dbl>    <dbl>       <dbl>\n 1 2015  January         1.22         40873.    2820.   28287.        49.9\n 2 2015  January         1           435021.  364302.   23821.        82.2\n 3 2015  January         1.08        788025.   53987.  552906.     39995. \n 4 2015  January         1.01         80034.   44562.   24964.      2752. \n 5 2015  January         1.02        491738     7194.  396752.       129. \n 6 2015  January         1.4         116253.    3268.   55693.       110. \n 7 2015  January         0.93       5777335. 2843648. 2267755.    137480. \n 8 2015  January         1.19        166006.   29419.   47221.     38569. \n 9 2015  January         1.11        783068.   30270.  550752.    124506. \n10 2015  January         0.88        228570.    3274.  168765.      1447. \n# ℹ 18,239 more rows\n# ℹ 6 more variables: `Total Bags` <dbl>, `Small Bags` <dbl>,\n#   `Large Bags` <dbl>, `XLarge Bags` <dbl>, type <fct>, region <chr>\n```\n:::\n\n```{.r .cell-code}\nglimpse(clean_avocado)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 18,249\nColumns: 13\n$ year           <chr> \"2015\", \"2015\", \"2015\", \"2015\", \"2015\", \"2015\", \"2015\",…\n$ month          <fct> January, January, January, January, January, January, J…\n$ AveragePrice   <dbl> 1.22, 1.00, 1.08, 1.01, 1.02, 1.40, 0.93, 1.19, 1.11, 0…\n$ `Total Volume` <dbl> 40873.28, 435021.49, 788025.06, 80034.32, 491738.00, 11…\n$ small          <dbl> 2819.50, 364302.39, 53987.31, 44562.12, 7193.87, 3267.9…\n$ large          <dbl> 28287.42, 23821.16, 552906.04, 24964.23, 396752.18, 556…\n$ Extra_large    <dbl> 49.90, 82.15, 39995.03, 2752.35, 128.82, 109.55, 137479…\n$ `Total Bags`   <dbl> 9716.46, 46815.79, 141136.68, 7755.62, 87663.13, 57182.…\n$ `Small Bags`   <dbl> 9186.93, 16707.15, 137146.07, 6064.30, 87406.84, 57182.…\n$ `Large Bags`   <dbl> 529.53, 30108.64, 3990.61, 1691.32, 256.29, 0.00, 47882…\n$ `XLarge Bags`  <dbl> 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 3375.80, 0.00, 0.00…\n$ type           <fct> conventional, conventional, conventional, conventional,…\n$ region         <chr> \"Albany\", \"Atlanta\", \"BaltimoreWashington\", \"Boise\", \"B…\n```\n:::\n\n```{.r .cell-code}\nunique(clean_avocado$type)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] conventional organic     \nLevels: conventional organic\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nclean_avocado <- clean_avocado %>% group_by(year, month, region, type) %>%\n  mutate(mean_price_permonth = mean(AveragePrice)) %>% \n  ungroup() %>% \n  group_by(year, region, type) %>%\n  mutate(mean_price_peryear = mean(AveragePrice))%>% \n  ungroup() %>% select(-AveragePrice)\n\nclean_avocado #%>%   summarise(mean_AveragePrice = mean(AveragePrice))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 18,249 × 14\n   year  month   `Total Volume`    small    large Extra_large `Total Bags`\n   <chr> <fct>            <dbl>    <dbl>    <dbl>       <dbl>        <dbl>\n 1 2015  January         40873.    2820.   28287.        49.9        9716.\n 2 2015  January        435021.  364302.   23821.        82.2       46816.\n 3 2015  January        788025.   53987.  552906.     39995.       141137.\n 4 2015  January         80034.   44562.   24964.      2752.         7756.\n 5 2015  January        491738     7194.  396752.       129.        87663.\n 6 2015  January        116253.    3268.   55693.       110.        57183.\n 7 2015  January       5777335. 2843648. 2267755.    137480.       528452.\n 8 2015  January        166006.   29419.   47221.     38569.        50798.\n 9 2015  January        783068.   30270.  550752.    124506.        77539.\n10 2015  January        228570.    3274.  168765.      1447.        55083.\n# ℹ 18,239 more rows\n# ℹ 7 more variables: `Small Bags` <dbl>, `Large Bags` <dbl>,\n#   `XLarge Bags` <dbl>, type <fct>, region <chr>, mean_price_permonth <dbl>,\n#   mean_price_peryear <dbl>\n```\n:::\n:::\n\nThe original average price is calculated per week which is useless for me. So I caculate the average price of each year and month. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummarise_avocado <- clean_avocado %>% group_by(year, region, type) %>%\n  summarise(mean_price_peryear = mean(mean_price_peryear), mean_total_volume = mean(`Total Volume`), mean_total_bags = mean(`Total Bags`) )\n\nsummarise_avocado\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 432 × 6\n# Groups:   year, region [216]\n   year  region       type  mean_price_peryear mean_total_volume mean_total_bags\n   <chr> <chr>        <fct>              <dbl>             <dbl>           <dbl>\n 1 2015  Albany       conv…               1.17            76209.          12738.\n 2 2015  Albany       orga…               1.91             1289.           1102.\n 3 2015  Atlanta      conv…               1.05           440346.          56460.\n 4 2015  Atlanta      orga…               1.71             6417.           1174.\n 5 2015  BaltimoreWa… conv…               1.17           768141.         179069.\n 6 2015  BaltimoreWa… orga…               1.57            13504.           3398.\n 7 2015  Boise        conv…               1.05            70886.           9472.\n 8 2015  Boise        orga…               1.69             1890.            490.\n 9 2015  Boston       conv…               1.14           523781.         107586.\n10 2015  Boston       orga…               1.80             4200.           3158.\n# ℹ 422 more rows\n```\n:::\n:::\n\n\n# Potential questions\nThis table is about the general things which are the average value of price, total volume and total bags in each year. I will plot some graphs about this tabble in the future.\n\nFrom this table, I will focus on below information in the future. \n\n1. The change in annual purchase volume of avocados in the whole country.\n2. people prefer organic avocados or conventional one. (Analyze it from regions, months and years.)\n3. The relationship between the purchase of the size of avocados and purchase of the type of it.\n4. The relationship between the purchase of the total volume and average price.\n5. Annual change of purchase of the total volume in each region.\n6. Each region purchased different size of bags ratios each year.\n\nThis is what I think of now, and I will continue to update it in the future.\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}