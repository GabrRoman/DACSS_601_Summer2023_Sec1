{
  "hash": "db3e6a064cc4f068117af48e8f8c8b20",
  "result": {
    "markdown": "---\ntitle: \"Challenge 5\"\nauthor: \"Prasann Desai\"\ndescription: \"Introduction to Visualization\"\ndate: \"7/1/2023\"\nformat:\n  html:\n    toc: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_5\n  - Prasann Desai\n  - cereal\n\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(ggplot2)\nlibrary(scales)\n\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\n```\n:::\n\n\n## Challenge Overview\n\nToday's challenge is to:\n\n1)  read in a data set, and describe the data set using both words and any supporting information (e.g., tables, etc)\n2)  tidy data (as needed, including sanity checks)\n3)  mutate variables as needed (including sanity checks)\n4)  create at least two univariate visualizations\n   - try to make them \"publication\" ready\n   - Explain why you choose the specific graph type\n5)  Create at least one bivariate visualization\n   - try to make them \"publication\" ready\n   - Explain why you choose the specific graph type\n\n[R Graph Gallery](https://r-graph-gallery.com/) is a good starting point for thinking about what information is conveyed in standard graph types, and includes example R code.\n\n(be sure to only include the category tags for the data you use!)\n\n## Read in data\n\nRead in one (or more) of the following datasets, using the correct R package and command.\n\n-   cereal.csv ⭐\n-   Total_cost_for_top_15_pathogens_2018.xlsx ⭐\n-   Australian Marriage ⭐⭐ \n-   AB_NYC_2019.csv ⭐⭐⭐\n-   StateCounty2012.xls ⭐⭐⭐\n-   Public School Characteristics ⭐⭐⭐⭐ \n-   USA Households ⭐⭐⭐⭐⭐\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Function call to read a csv file\ncereal_df <- read_csv(\"_data/cereal.csv\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Preview of the dataset\ncereal_df\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 20 × 4\n   Cereal                Sodium Sugar Type \n   <chr>                  <dbl> <dbl> <chr>\n 1 Frosted Mini Wheats        0    11 A    \n 2 Raisin Bran              340    18 A    \n 3 All Bran                  70     5 A    \n 4 Apple Jacks              140    14 C    \n 5 Captain Crunch           200    12 C    \n 6 Cheerios                 180     1 C    \n 7 Cinnamon Toast Crunch    210    10 C    \n 8 Crackling Oat Bran       150    16 A    \n 9 Fiber One                100     0 A    \n10 Frosted Flakes           130    12 C    \n11 Froot Loops              140    14 C    \n12 Honey Bunches of Oats    180     7 A    \n13 Honey Nut Cheerios       190     9 C    \n14 Life                     160     6 C    \n15 Rice Krispies            290     3 C    \n16 Honey Smacks              50    15 A    \n17 Special K                220     4 A    \n18 Wheaties                 180     4 A    \n19 Corn Flakes              200     3 A    \n20 Honeycomb                210    11 C    \n```\n:::\n:::\n\n\n### Briefly describe the data\n\nResponse:\n\nFrom the above output, we can see that the dataset contains mainly the nutritional information (Sodium and Sugar content) + category/type about 20 cereal products. Based on the column names and general knowledge, it is safe to assume that the unit of measurement for Sodium Content is milligrams and for Sugar it is grams.\n\n## Tidy Data (as needed)\n\nIs your data already tidy, or is there work to be done? Be sure to anticipate your end result to provide a sanity check, and document your work here.\n\nResponse: It appears to me that the data is already tidy. (Each variable has its own column, Each observation has its own row and Each value is in its own cell)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Sanity check for duplicate responses\nn_distinct(cereal_df$Cereal)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 20\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Check to see if the category wise totals add up to 20\ntable(cereal_df$Type)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n A  C \n10 10 \n```\n:::\n:::\n\n\nAre there any variables that require mutation to be usable in your analysis stream? For example, do you need to calculate new values in order to graph them? Can string values be represented numerically? Do you need to turn any variables into factors and reorder for ease of graphics and visualization?\n\nDocument your work here.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Normalizing the 'Sodium' and 'Sugar' columns to a scale of 0-1. It will be helpful with comparative Bivariate analysis/visualization.\ncereal_df <- mutate(cereal_df, sodium_norm = rescale(Sodium), sugar_norm = rescale(Sugar))\ncereal_df\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 20 × 6\n   Cereal                Sodium Sugar Type  sodium_norm sugar_norm\n   <chr>                  <dbl> <dbl> <chr>       <dbl>      <dbl>\n 1 Frosted Mini Wheats        0    11 A           0         0.611 \n 2 Raisin Bran              340    18 A           1         1     \n 3 All Bran                  70     5 A           0.206     0.278 \n 4 Apple Jacks              140    14 C           0.412     0.778 \n 5 Captain Crunch           200    12 C           0.588     0.667 \n 6 Cheerios                 180     1 C           0.529     0.0556\n 7 Cinnamon Toast Crunch    210    10 C           0.618     0.556 \n 8 Crackling Oat Bran       150    16 A           0.441     0.889 \n 9 Fiber One                100     0 A           0.294     0     \n10 Frosted Flakes           130    12 C           0.382     0.667 \n11 Froot Loops              140    14 C           0.412     0.778 \n12 Honey Bunches of Oats    180     7 A           0.529     0.389 \n13 Honey Nut Cheerios       190     9 C           0.559     0.5   \n14 Life                     160     6 C           0.471     0.333 \n15 Rice Krispies            290     3 C           0.853     0.167 \n16 Honey Smacks              50    15 A           0.147     0.833 \n17 Special K                220     4 A           0.647     0.222 \n18 Wheaties                 180     4 A           0.529     0.222 \n19 Corn Flakes              200     3 A           0.588     0.167 \n20 Honeycomb                210    11 C           0.618     0.611 \n```\n:::\n:::\n\n\n## Univariate Visualizations\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Building a temp df suitable for creating a pie chart\ncereals_by_type <- count(cereal_df, Type) %>% mutate(prop = round(n*100/sum(n),1), lab.ypos = cumsum(prop) - 0.5*prop)\ncereals_by_type$label <- paste0(cereals_by_type$Type, \"\\n\", round(cereals_by_type$prop), \"%\")\ncereals_by_type\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 5\n  Type      n  prop lab.ypos label   \n  <chr> <int> <dbl>    <dbl> <chr>   \n1 A        10    50       25 \"A\\n50%\"\n2 C        10    50       75 \"C\\n50%\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Creating a pie chart\nggplot(cereals_by_type, \n       aes(x = \"\",\n           y = prop,\n           fill = Type)) + \n  geom_bar(width = 1,\n           stat = \"identity\", \n           color = \"black\") +\n  geom_text(aes(y = lab.ypos, label = label),\n            color = \"black\") +\n  coord_polar(\"y\",\n              start = 0,\n              direction = -1\n              ) +\n  theme_void() +\n  labs(title = \"Cereals by Type\")\n```\n\n::: {.cell-output-display}\n![](challenge_5_Prasann_Desai_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n## Bivariate Visualization(s)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Building a scatter plot of sodium_norm and sugar_norm\nggplot(cereal_df,\n       aes(x = sodium_norm,\n           y = sugar_norm,\n           col = Type\n           )) +\n  geom_point(size = 2,\n             alpha = 0.8\n             ) + \n  labs(x = \"Relative sodium content\",\n       y = \"Relative sugar content\",\n       title = \"Sodium vs. Sugar content\",\n       subtitle = \"Nutritional content comparison of 20 cereals\")\n```\n\n::: {.cell-output-display}\n![](challenge_5_Prasann_Desai_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\n\nAny additional comments?\n",
    "supporting": [
      "challenge_5_Prasann_Desai_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}