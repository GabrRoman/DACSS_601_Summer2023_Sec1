{
  "hash": "771fa2846dc3aab3a1a190468e984d29",
  "result": {
    "markdown": "---\ntitle: \"Challenge 10\"\nauthor: \"Noah Dixon\"\ndescription: \"purrr\"\ndate: \"7/6/2023\"\nformat:\n  html:\n    df-print: paged\n    toc: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_10\n---\n\n\n\n\n## Read Data\n\nUsing the read.csv function we can read the cereal.csv data into a data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncereal <- read.csv(\"_data/cereal.csv\")\ncereal\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"Cereal\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"Sodium\"],\"name\":[2],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"Sugar\"],\"name\":[3],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"Type\"],\"name\":[4],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"Frosted Mini Wheats\",\"2\":\"0\",\"3\":\"11\",\"4\":\"A\"},{\"1\":\"Raisin Bran\",\"2\":\"340\",\"3\":\"18\",\"4\":\"A\"},{\"1\":\"All Bran\",\"2\":\"70\",\"3\":\"5\",\"4\":\"A\"},{\"1\":\"Apple Jacks\",\"2\":\"140\",\"3\":\"14\",\"4\":\"C\"},{\"1\":\"Captain Crunch\",\"2\":\"200\",\"3\":\"12\",\"4\":\"C\"},{\"1\":\"Cheerios\",\"2\":\"180\",\"3\":\"1\",\"4\":\"C\"},{\"1\":\"Cinnamon Toast Crunch\",\"2\":\"210\",\"3\":\"10\",\"4\":\"C\"},{\"1\":\"Crackling Oat Bran\",\"2\":\"150\",\"3\":\"16\",\"4\":\"A\"},{\"1\":\"Fiber One\",\"2\":\"100\",\"3\":\"0\",\"4\":\"A\"},{\"1\":\"Frosted Flakes\",\"2\":\"130\",\"3\":\"12\",\"4\":\"C\"},{\"1\":\"Froot Loops\",\"2\":\"140\",\"3\":\"14\",\"4\":\"C\"},{\"1\":\"Honey Bunches of Oats\",\"2\":\"180\",\"3\":\"7\",\"4\":\"A\"},{\"1\":\"Honey Nut Cheerios\",\"2\":\"190\",\"3\":\"9\",\"4\":\"C\"},{\"1\":\"Life\",\"2\":\"160\",\"3\":\"6\",\"4\":\"C\"},{\"1\":\"Rice Krispies\",\"2\":\"290\",\"3\":\"3\",\"4\":\"C\"},{\"1\":\"Honey Smacks\",\"2\":\"50\",\"3\":\"15\",\"4\":\"A\"},{\"1\":\"Special K\",\"2\":\"220\",\"3\":\"4\",\"4\":\"A\"},{\"1\":\"Wheaties\",\"2\":\"180\",\"3\":\"4\",\"4\":\"A\"},{\"1\":\"Corn Flakes\",\"2\":\"200\",\"3\":\"3\",\"4\":\"A\"},{\"1\":\"Honeycomb\",\"2\":\"210\",\"3\":\"11\",\"4\":\"C\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\nNext, we will split the cereal dataframe based on cereal type.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncereal_types <- split(cereal, cereal$Type)\ncereal_types\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$A\n                  Cereal Sodium Sugar Type\n1    Frosted Mini Wheats      0    11    A\n2            Raisin Bran    340    18    A\n3               All Bran     70     5    A\n8     Crackling Oat Bran    150    16    A\n9              Fiber One    100     0    A\n12 Honey Bunches of Oats    180     7    A\n16          Honey Smacks     50    15    A\n17             Special K    220     4    A\n18              Wheaties    180     4    A\n19           Corn Flakes    200     3    A\n\n$C\n                  Cereal Sodium Sugar Type\n4            Apple Jacks    140    14    C\n5         Captain Crunch    200    12    C\n6               Cheerios    180     1    C\n7  Cinnamon Toast Crunch    210    10    C\n10        Frosted Flakes    130    12    C\n11           Froot Loops    140    14    C\n13    Honey Nut Cheerios    190     9    C\n14                  Life    160     6    C\n15         Rice Krispies    290     3    C\n20             Honeycomb    210    11    C\n```\n:::\n:::\n\n\nNow, we will recreate my function from challenge 9 to calculate summary statistics for a variable. We will alter the function slightly to accept the column name as an argument along with the data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstatsFunction <- function(df, col_name) {\n  column <- df[[col_name]]\n  print(paste0(\"Summary Statistics:\"))\n  print(paste0(\"Maximum: \", max(column)))\n  print(paste0(\"Minimum: \", min(column)))\n  print(paste0(\"Mean: \", mean(column, na.rm = TRUE)))\n  print(paste0(\"Median: \", median(column, na.rm = TRUE)))\n  print(paste0(\"Standard Deviation: \", sd(column, na.rm = TRUE)))\n}\n```\n:::\n\n\n\nFinally, we will use the map function from the purrr package to apply this function to the Sugar column of both data frames in the cereal_types list.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- map(cereal_types, ~statsFunction(.x, \"Sugar\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Summary Statistics:\"\n[1] \"Maximum: 18\"\n[1] \"Minimum: 0\"\n[1] \"Mean: 8.3\"\n[1] \"Median: 6\"\n[1] \"Standard Deviation: 6.25477595299961\"\n[1] \"Summary Statistics:\"\n[1] \"Maximum: 14\"\n[1] \"Minimum: 1\"\n[1] \"Mean: 9.2\"\n[1] \"Median: 10.5\"\n[1] \"Standard Deviation: 4.49196814077947\"\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}