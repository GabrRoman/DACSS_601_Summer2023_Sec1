{
  "hash": "52de27d0d6dac62d726a6cffe81da8ba",
  "result": {
    "markdown": "---\ntitle: \"Challenge 5 - AB NYC\"\nauthor: \"Srujan Kagitala\"\ndescription: \"Introduction to Visualization\"\ndate: \"6/28/2023\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_5\n  - air_bnb\n  - srujan_kagitala\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(ggplot2)\n\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\n```\n:::\n\n\n## Challenge Overview\n\nToday's challenge is to:\n\n1)  read in a data set, and describe the data set using both words and any supporting information (e.g., tables, etc)\n2)  tidy data (as needed, including sanity checks)\n3)  mutate variables as needed (including sanity checks)\n4)  create at least two univariate visualizations\n   - try to make them \"publication\" ready\n   - Explain why you choose the specific graph type\n5)  Create at least one bivariate visualization\n   - try to make them \"publication\" ready\n   - Explain why you choose the specific graph type\n\n[R Graph Gallery](https://r-graph-gallery.com/) is a good starting point for thinking about what information is conveyed in standard graph types, and includes example R code.\n\n(be sure to only include the category tags for the data you use!)\n\n## Read in data\n\nRead in one (or more) of the following datasets, using the correct R package and command.\n\n-   AB_NYC_2019.csv ⭐⭐⭐\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstay_data <- read_csv(\"_data/AB_NYC_2019.csv\")\nhead(stay_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 16\n     id name        host_id host_name neighbourhood_group neighbourhood latitude\n  <dbl> <chr>         <dbl> <chr>     <chr>               <chr>            <dbl>\n1  2539 Clean & qu…    2787 John      Brooklyn            Kensington        40.6\n2  2595 Skylit Mid…    2845 Jennifer  Manhattan           Midtown           40.8\n3  3647 THE VILLAG…    4632 Elisabeth Manhattan           Harlem            40.8\n4  3831 Cozy Entir…    4869 LisaRoxa… Brooklyn            Clinton Hill      40.7\n5  5022 Entire Apt…    7192 Laura     Manhattan           East Harlem       40.8\n6  5099 Large Cozy…    7322 Chris     Manhattan           Murray Hill       40.7\n# ℹ 9 more variables: longitude <dbl>, room_type <chr>, price <dbl>,\n#   minimum_nights <dbl>, number_of_reviews <dbl>, last_review <date>,\n#   reviews_per_month <dbl>, calculated_host_listings_count <dbl>,\n#   availability_365 <dbl>\n```\n:::\n:::\n\n\n### Briefly describe the data\n\n\n::: {.cell}\n\n```{.r .cell-code}\narea_wise_stays <- stay_data %>%\n  group_by(neighbourhood_group, room_type) %>%\n  summarise(count = n())\n```\n:::\n\n\nThe AB_NYC_2019 provides information on Airbnb stays in New York in 2019. There are details about 48895 stays. They are distributed across Bronx, Brooklyn, Manhattan, Queens, Staten Island neighbourhoods. The below table shows the number of stay options across New York neighbourhood.\n\n\n::: {.cell}\n\n```{.r .cell-code}\narea_wise_stays\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 15 × 3\n# Groups:   neighbourhood_group [5]\n   neighbourhood_group room_type       count\n   <chr>               <chr>           <int>\n 1 Bronx               Entire home/apt   379\n 2 Bronx               Private room      652\n 3 Bronx               Shared room        60\n 4 Brooklyn            Entire home/apt  9559\n 5 Brooklyn            Private room    10132\n 6 Brooklyn            Shared room       413\n 7 Manhattan           Entire home/apt 13199\n 8 Manhattan           Private room     7982\n 9 Manhattan           Shared room       480\n10 Queens              Entire home/apt  2096\n11 Queens              Private room     3372\n12 Queens              Shared room       198\n13 Staten Island       Entire home/apt   176\n14 Staten Island       Private room      188\n15 Staten Island       Shared room         9\n```\n:::\n:::\n\nEach stay option has information about id, name, host_id, host_name, neighbourhood_group, neighbourhood, latitude, longitude, room_type, price, minimum_nights, number_of_reviews, last_review, reviews_per_month, calculated_host_listings_count, availability_365.\n\n## Tidy Data (as needed)\n\nIs your data already tidy, or is there work to be done? Be sure to anticipate your end result to provide a sanity check, and document your work here.\n\nVariables like id and host_id are int but they are actually categorical. So, they have to be converted to factor. We can drop one of the columns out of \"host_id\" and \"name\" for exploratory analysis as they only act as primary keys. \"last_review\" column has to be converted to date format to represent the true data format. All character columns like neighbourhood_group, neighbourhood, etc have to be converted to factor to get better insights on using summary. After this step, summary will give value counts for categorical variables and there will be 15 columns.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstay_data <- stay_data %>%\n  select(-name) %>%\n  mutate_if(is.character, as.factor) %>%\n  mutate(id = as.factor(id),\n         host_id = as.factor(host_id),\n         last_review = as.Date(last_review, format = \"%Y-%m-%d\"))\n\nsummary(stay_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       id             host_id             host_name        neighbourhood_group\n 2539   :    1   219517861:  327   Michael     :  417   Bronx        : 1091   \n 2595   :    1   107434423:  232   David       :  403   Brooklyn     :20104   \n 3647   :    1   30283594 :  121   Sonder (NYC):  327   Manhattan    :21661   \n 3831   :    1   137358866:  103   John        :  294   Queens       : 5666   \n 5022   :    1   12243051 :   96   Alex        :  279   Staten Island:  373   \n 5099   :    1   16098958 :   96   (Other)     :47154                         \n (Other):48889   (Other)  :47920   NA's        :   21                         \n            neighbourhood      latitude       longitude     \n Williamsburg      : 3920   Min.   :40.50   Min.   :-74.24  \n Bedford-Stuyvesant: 3714   1st Qu.:40.69   1st Qu.:-73.98  \n Harlem            : 2658   Median :40.72   Median :-73.96  \n Bushwick          : 2465   Mean   :40.73   Mean   :-73.95  \n Upper West Side   : 1971   3rd Qu.:40.76   3rd Qu.:-73.94  \n Hell's Kitchen    : 1958   Max.   :40.91   Max.   :-73.71  \n (Other)           :32209                                   \n           room_type         price         minimum_nights    number_of_reviews\n Entire home/apt:25409   Min.   :    0.0   Min.   :   1.00   Min.   :  0.00   \n Private room   :22326   1st Qu.:   69.0   1st Qu.:   1.00   1st Qu.:  1.00   \n Shared room    : 1160   Median :  106.0   Median :   3.00   Median :  5.00   \n                         Mean   :  152.7   Mean   :   7.03   Mean   : 23.27   \n                         3rd Qu.:  175.0   3rd Qu.:   5.00   3rd Qu.: 24.00   \n                         Max.   :10000.0   Max.   :1250.00   Max.   :629.00   \n                                                                              \n  last_review         reviews_per_month calculated_host_listings_count\n Min.   :2011-03-28   Min.   : 0.010    Min.   :  1.000               \n 1st Qu.:2018-07-08   1st Qu.: 0.190    1st Qu.:  1.000               \n Median :2019-05-19   Median : 0.720    Median :  1.000               \n Mean   :2018-10-04   Mean   : 1.373    Mean   :  7.144               \n 3rd Qu.:2019-06-23   3rd Qu.: 2.020    3rd Qu.:  2.000               \n Max.   :2019-07-08   Max.   :58.500    Max.   :327.000               \n NA's   :10052        NA's   :10052                                   \n availability_365\n Min.   :  0.0   \n 1st Qu.:  0.0   \n Median : 45.0   \n Mean   :112.8   \n 3rd Qu.:227.0   \n Max.   :365.0   \n                 \n```\n:::\n:::\n\n\nCleaned data has 15 columns. Summary shows value counts of categorical variables. The class of \"last_review\" is Date.\n\nAre there any variables that require mutation to be usable in your analysis stream? For example, do you need to calculate new values in order to graph them? Can string values be represented numerically? Do you need to turn any variables into factors and reorder for ease of graphics and visualization?\n\nAdding percent column to \"area_wise_stays\" tibble that has been created above by grouping original data based on \"neighbourhood_group\" and \"room_type\".\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(percent_rooms_in_area <- area_wise_stays %>%\n  group_by(neighbourhood_group) %>%\n  summarise(count = sum(count)) %>%\n  mutate(percent = count * 100 / sum(count),\n         id = LETTERS[row_number()]))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 4\n  neighbourhood_group count percent id   \n  <chr>               <int>   <dbl> <chr>\n1 Bronx                1091   2.23  A    \n2 Brooklyn            20104  41.1   B    \n3 Manhattan           21661  44.3   C    \n4 Queens               5666  11.6   D    \n5 Staten Island         373   0.763 E    \n```\n:::\n:::\n\nWe have the percent distribution of rooms across New York as shown above and each row is tagged with a id.\n\n## Univariate Visualizations\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# pie chart of above room distribution data\nggplot(percent_rooms_in_area, \n       aes(x = \"\", y = percent,\n           fill = paste(id,' - ',neighbourhood_group,'(',round(percent,2),'%)'))) +\n  geom_bar(width = 10, stat = \"identity\", color = \"black\") +\n  geom_text(aes(x = 2.5, label = id), \n            position = position_stack(vjust=0.5),\n            color = \"black\") +\n  coord_polar(\"y\", start = 0) +\n  theme_void() +\n  labs(title = \"Stays in New York area\",\n       fill = \"Area\")\n```\n\n::: {.cell-output-display}\n![](challenge5_srujankagitala_files/figure-html/univariate_plot-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# box plot for availability in 365\nggplot(stay_data, mapping = aes(y = availability_365, fill = \"orange\")) +\n  geom_boxplot() +\n  theme(axis.title.y = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks.y = element_blank(),\n        legend.position = \"none\") +\n  coord_flip() +\n  labs(y = \"Availability (Number of days in year)\")\n```\n\n::: {.cell-output-display}\n![](challenge5_srujankagitala_files/figure-html/univariate_plot-2.png){width=672}\n:::\n:::\n\n\nPie chart has been chosen to show room distribution because \"neighbourhood_group\" is categorical variable. Box plot has been chosen to show availability of stays in New York as it is a quantitative variable and we can get some good statistical idea as well.\n\n## Bivariate Visualization(s)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Bar graph for room types in New York neighbourhood\nggplot(data = area_wise_stays, aes(x= room_type, y=count)) +\n  geom_bar(stat = \"identity\",\n           mapping = aes(fill = neighbourhood_group),\n           position = \"dodge\") +\n  labs(title =\"Room types in New York neighbourhood\",\n       y = \"Number of rooms\",\n       x = \"Room Type\",\n       fill = \"Area\")\n```\n\n::: {.cell-output-display}\n![](challenge5_srujankagitala_files/figure-html/bivariate_plot-1.png){width=672}\n:::\n\n```{.r .cell-code}\n#Plot price distribution for each room type\nggplot(stay_data, aes(x = price, fill = room_type)) +\n  geom_density(adjust =250, alpha = 0.5) +\n  theme_linedraw() +\n  facet_wrap(~room_type) +\n  theme(legend.position = \"none\") +\n  labs(title = \"Price density for various room types in New York\",\n       x = \"Price ($)\")\n```\n\n::: {.cell-output-display}\n![](challenge5_srujankagitala_files/figure-html/bivariate_plot-2.png){width=672}\n:::\n:::\n\n\nBar plot has been chosen to show the number of rooms based on their types across New York area as the variable is categorical. Likewise, density plot has been chosen for price because it is a continuous variable. We can see that the standard deviation in prices is higher for entire home/shared room compared to private room throughout New York.",
    "supporting": [
      "challenge5_srujankagitala_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}