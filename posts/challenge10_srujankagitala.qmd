---
title: "Challenge 10 - Wild Bird"
author: "Srujan Kagitala"
description: "purrr"
date: "7/11/2023"
format:
  html:
    toc: true
    code-copy: true
    code-tools: true
    df-print: paged
categories:
  - challenge_10
  - wild_bird
  - srujan_kagitala
---

```{r}
#| label: setup
#| warning: false
#| message: false
#| include: false

library(tidyverse)
library(ggplot2)
library(readxl)

knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)
```

## Challenge Overview

The [purrr](https://purrr.tidyverse.org/) package is a powerful tool for functional programming. It allows the user to apply a single function across multiple objects. It can replace for loops with a more readable (and often faster) simple function call. 

For example, we can draw `n` random samples from 10 different distributions using a vector of 10 means.  

```{r}
n <- 100 # sample size
m <- seq(1,10) # means 
samps <- map(m,rnorm,n=n) 
```

We can then use `map_dbl` to verify that this worked correctly by computing the mean for each sample.  

```{r}
samps %>%
  map_dbl(mean)
```

`purrr` is tricky to learn (but beyond useful once you get a handle on it). Therefore, it's imperative that you complete the `purr` and `map` readings before attempting this challenge.  

## The challenge  

Use `purrr` with a function to perform *some* data science task. What this task is is up to you. It could involve computing summary statistics, reading in multiple datasets, running a random process multiple times, or anything else you might need to do in your work as a data analyst. You might consider using `purrr` with a function you wrote for challenge 9.  

## Read

Using "wild_bird_data.xlsx" dataset. Building on top of challenge 9.

```{r}
#| label: read

wild_bird_data <- read_excel("_data/wild_bird_data.xlsx", skip = 1)
wild_bird_data
```

## Function

Creating a function to show statistics like mean, median, min, max, IQR, standard deviation and variance
```{r}
#| label: func

#Function to give statistics
statistics <- function(data, col_name){
  result <- data %>%
    select({{col_name}}) %>%
    summarise_all(list(mean = mean,
                       median = median,
                       min = min,
                       max = max,
                       IQR = IQR,
                       sd = sd,
                       var = var), na.rm = TRUE)
  list(result)
}
```

Statistics of wet body weight of wild birds.

```{r}
statistics(wild_bird_data,`Wet body weight [g]`)
```

Using `map` to compute statistics on two data frames of wild_bird_data, split by equal number of rows in each data frame

```{r}
#| label: map

split_data <- list(wild_bird_data[1:73,], wild_bird_data[74:146,])
split_data
map(split_data, ~statistics(.x, `Wet body weight [g]`))
map(split_data, ~statistics(.x, `Population size`))
```

